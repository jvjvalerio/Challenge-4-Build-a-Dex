import { BehaviorSubject } from 'rxjs';
import { useRefFn } from '../helpers';
import { useRef } from 'react';
/**
 * @template TOutput Output value within Observable.
 * @template TInputs An readonly tuple of all dependencies.
 *
 * @param useCustomEffect useEffect or useLayoutEffect
 * @param init A pure function that, when applied to an Observable,
 * returns an Observable.
 * @param inputs An dependency array with fixed length. When one of the dependencies
 * changes the Observable in `init` will emit an array of all the dependencies.
 */
export function useObservableInternal(useCustomEffect, init, inputs) {
    if (!inputs) {
        return useRefFn(init).current;
    }
    var inputs$Ref = useRefFn(function () { return new BehaviorSubject(inputs); });
    var source$Ref = useRefFn(function () { return init(inputs$Ref.current); });
    var firstEffectRef = useRef(true);
    useCustomEffect(function () {
        if (firstEffectRef.current) {
            firstEffectRef.current = false;
            return;
        }
        inputs$Ref.current.next(inputs);
    }, inputs);
    return source$Ref.current;
}
//# sourceMappingURL=use-observable-internal.js.map