/**
 * Useful utilities
 */
import { MutableRefObject, useLayoutEffect } from 'react';
import { Subject, Observable } from 'rxjs';
/**
 * Returns the first argument it receives.
 */
export declare function identity<T>(value: T): T;
/**
 * Maps an Observable of Arraylike to an Observable
 * of the first item.
 *
 * Example:
 *
 * ```typescript
 * const text$ = useObservable(pluckFirst, [props.text])
 * ```
 *
 * @param inputs$ An Observable of arraylike.
 *
 */
export declare function pluckFirst<TArr extends ArrayLike<any>>(inputs$: Observable<TArr>): Observable<TArr[0]>;
/**
 * Maps an Observable of DOM events to an Observable
 * of the currentTarget value.
 *
 * Example:
 *
 * ```typescript
 * const [onChange, textChange$] = useObservableCallback<
 *  string,
 *  React.FormEvent<HTMLInputElement>
 * >(pluckCurrentTargetValue)
 * ```
 *
 */
export declare function pluckCurrentTargetValue<TEvent extends {
    currentTarget: {
        value: any;
    };
}>(event$: Observable<TEvent>): Observable<TEvent['currentTarget']['value']>;
/**
 * Maps an Observable of DOM events to an Observable
 * of the currentTarget checked.
 *
 * Example:
 *
 * ```typescript
 * const [onChange, checked$] = useObservableCallback<
 *  boolean,
 *  React.FormEvent<HTMLInputElement>
 * >(pluckCurrentTargetChecked)
 * ```
 *
 */
export declare function pluckCurrentTargetChecked<TEvent extends {
    currentTarget: {
        checked: any;
    };
}>(event$: Observable<TEvent>): Observable<TEvent['currentTarget']['checked']>;
/**
 * Return an empty Subject
 * @ignore
 */
export declare function getEmptySubject<T>(): Subject<T>;
/**
 * One-time ref init.
 * @param init A function that returns a value. Will be called only once.
 * @returns A ref object with the returned value.
 */
export declare function useRefFn<T>(init: () => T): MutableRefObject<T>;
/**
 * Force re-renders Component.
 */
export declare function useForceUpdate(): () => void;
/**
 * Prevent React warning when using useLayoutEffect on server.
 */
export declare const useIsomorphicLayoutEffect: typeof useLayoutEffect;
