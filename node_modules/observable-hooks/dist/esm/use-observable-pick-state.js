import { useDebugValue } from 'react';
import { map, distinctUntilChanged } from 'rxjs/operators';
import { useObservableState } from './use-observable-state';
import { useObservable } from './use-observable';
export function useObservablePickState(state$, initialState) {
    var keys = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        keys[_i - 2] = arguments[_i];
    }
    var value = useObservableState(useObservable(function () {
        return state$.pipe(distinctUntilChanged(function (s1, s2) { return keys.every(function (k) { return s1[k] === s2[k]; }); }), map(function (state) {
            return keys.reduce(
            // eslint-disable-next-line no-sequences
            function (o, k) { return ((o[k] = state[k]), o); }, {});
        }));
    }), initialState);
    useDebugValue(value);
    return value;
}
//# sourceMappingURL=use-observable-pick-state.js.map