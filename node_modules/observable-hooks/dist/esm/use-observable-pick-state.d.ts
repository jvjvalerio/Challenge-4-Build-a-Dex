import { Observable } from 'rxjs';
/**
 * Creates an object composed of the picked state properties. Similar to lodash `pick`.
 * Changes of any of these properties will trigger a rerendering.
 * Errors are thrown on unreachable path.
 *
 * @param state$ Output state.
 * @param keys keys of state
 */
export declare function useObservablePickState<TState, TKeys extends keyof TState, TInitial extends null | undefined | void>(state$: Observable<TState>, initialState: TInitial, ...keys: TKeys[]): {
    [K in TKeys]: TState[K];
} | TInitial;
export declare function useObservablePickState<TState, TKeys extends keyof TState>(state$: Observable<TState>, initialState: {
    [K in TKeys]: TState[K];
} | (() => {
    [K in TKeys]: TState[K];
}), ...keys: TKeys[]): {
    [K in TKeys]: TState[K];
};
