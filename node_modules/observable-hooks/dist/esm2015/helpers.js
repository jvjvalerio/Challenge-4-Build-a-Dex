/**
 * Useful utilities
 */
import { useRef, useState, useLayoutEffect, useEffect } from 'react';
import { Subject } from 'rxjs';
import { pluck } from 'rxjs/operators';
/**
 * Returns the first argument it receives.
 */
export function identity(value) {
    return value;
}
/**
 * Maps an Observable of Arraylike to an Observable
 * of the first item.
 *
 * Example:
 *
 * ```typescript
 * const text$ = useObservable(pluckFirst, [props.text])
 * ```
 *
 * @param inputs$ An Observable of arraylike.
 *
 */
export function pluckFirst(inputs$) {
    return pluck(0)(inputs$);
}
/**
 * Maps an Observable of DOM events to an Observable
 * of the currentTarget value.
 *
 * Example:
 *
 * ```typescript
 * const [onChange, textChange$] = useObservableCallback<
 *  string,
 *  React.FormEvent<HTMLInputElement>
 * >(pluckCurrentTargetValue)
 * ```
 *
 */
export function pluckCurrentTargetValue(event$) {
    return pluck('currentTarget', 'value')(event$);
}
/**
 * Maps an Observable of DOM events to an Observable
 * of the currentTarget checked.
 *
 * Example:
 *
 * ```typescript
 * const [onChange, checked$] = useObservableCallback<
 *  boolean,
 *  React.FormEvent<HTMLInputElement>
 * >(pluckCurrentTargetChecked)
 * ```
 *
 */
export function pluckCurrentTargetChecked(event$) {
    return pluck('currentTarget', 'checked')(event$);
}
/**
 * Return an empty Subject
 * @ignore
 */
export function getEmptySubject() {
    return new Subject();
}
/**
 * One-time ref init.
 * @param init A function that returns a value. Will be called only once.
 * @returns A ref object with the returned value.
 */
export function useRefFn(init) {
    const firstRef = useRef(true);
    const ref = useRef(null);
    if (firstRef.current) {
        firstRef.current = false;
        ref.current = init();
    }
    return ref;
}
/**
 * Force re-renders Component.
 */
export function useForceUpdate() {
    const updateState = useState(0)[1];
    return useRef(() => updateState(increment)).current;
}
function increment(n) {
    return (n + 1) % 1000000;
}
/**
 * Prevent React warning when using useLayoutEffect on server.
 */
export const useIsomorphicLayoutEffect = typeof window !== 'undefined' &&
    typeof window.document !== 'undefined' &&
    typeof window.document.createElement !== 'undefined'
    ? useLayoutEffect
    : /* istanbul ignore next: both are not called on server */
        useEffect;
//# sourceMappingURL=helpers.js.map