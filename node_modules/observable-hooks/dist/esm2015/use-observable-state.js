import { isObservable } from 'rxjs';
import { useState, useRef, useDebugValue } from 'react';
import { useSubscription } from './use-subscription';
import { useRefFn, getEmptySubject } from './helpers';
export function useObservableState(state$OrInit, initialState) {
    const [state, setState] = useState(initialState);
    let callback;
    let state$;
    if (isObservable(state$OrInit)) {
        state$ = state$OrInit;
    }
    else {
        const init = state$OrInit;
        // Even though hooks are under conditional block
        // it is for a completely different use case
        // which unlikely coexists with the other one.
        // A warning is also added to the docs.
        const input$Ref = useRefFn(getEmptySubject);
        state$ = useRefFn(() => init(input$Ref.current, state)).current;
        callback = useRef((state) => input$Ref.current.next(state)).current;
    }
    useSubscription(state$, setState);
    // Display state in React DevTools.
    useDebugValue(state);
    return callback ? [state, callback] : state;
}
//# sourceMappingURL=use-observable-state.js.map