"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useObservableSuspense = void 0;
var react_1 = require("react");
var use_subscription_1 = require("./use-subscription");
var helpers_1 = require("./helpers");
/**
 * Consume the Observable resource.
 *
 * Unlike Promise, Observable is a multiple push mechanism.
 * This hook triggers extra re-rendering when Suspense should restart.
 *
 * @param resource Observable resource
 */
function useObservableSuspense(resource) {
    var resourceValue = resource.read();
    var forceUpdate = helpers_1.useForceUpdate();
    var _a = react_1.useState(resourceValue), state = _a[0], setState = _a[1];
    use_subscription_1.useSubscription(resource.shouldUpdate$$, function (valueRef) {
        // ObservableResource supports Stale-While-Revalidate pattern.
        // Schedule states to prevent tearing.
        if (valueRef) {
            setState(valueRef.current);
        }
        else {
            forceUpdate();
        }
    });
    react_1.useDebugValue(state);
    return state;
}
exports.useObservableSuspense = useObservableSuspense;
//# sourceMappingURL=use-observable-suspense.js.map