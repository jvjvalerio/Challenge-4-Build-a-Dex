import { Observable, Subject } from 'rxjs';
/**
 * Rewires Observable to Relay-like Suspense resource.
 */
export declare class ObservableResource<TInput, TOutput extends TInput = TInput> {
    /**
     * Unlike Promise, Observable is a multiple push mechanism.
     * Only force update when Suspense needs to restart.
     */
    readonly shouldUpdate$$: Subject<void | {
        current: TOutput;
    } | undefined>;
    get isDestroyed(): boolean;
    private handler;
    private value;
    private error;
    private input$;
    private subscription;
    private isSuccess;
    private _isDestroyed;
    /**
     * @param input$ An Observable.
     * @param isSuccess A function that determines if the value emitted from
     * `input$` is of success state. If false a Suspense is triggered.
     *  Default all true.
     */
    constructor(input$: Observable<TInput>, isSuccess?: TInput extends TOutput ? (value: TInput) => boolean : (value: TInput) => value is TOutput);
    read(): TOutput;
    reload(newInput$?: Observable<TInput>): void;
    destroy(): void;
    private handleNext;
    private handleError;
    private handleComplete;
    private getHandler;
}
