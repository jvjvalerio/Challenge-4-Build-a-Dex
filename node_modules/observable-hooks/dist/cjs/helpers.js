"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useIsomorphicLayoutEffect = exports.useForceUpdate = exports.useRefFn = exports.getEmptySubject = exports.pluckCurrentTargetChecked = exports.pluckCurrentTargetValue = exports.pluckFirst = exports.identity = void 0;
/**
 * Useful utilities
 */
var react_1 = require("react");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
/**
 * Returns the first argument it receives.
 */
function identity(value) {
    return value;
}
exports.identity = identity;
/**
 * Maps an Observable of Arraylike to an Observable
 * of the first item.
 *
 * Example:
 *
 * ```typescript
 * const text$ = useObservable(pluckFirst, [props.text])
 * ```
 *
 * @param inputs$ An Observable of arraylike.
 *
 */
function pluckFirst(inputs$) {
    return operators_1.pluck(0)(inputs$);
}
exports.pluckFirst = pluckFirst;
/**
 * Maps an Observable of DOM events to an Observable
 * of the currentTarget value.
 *
 * Example:
 *
 * ```typescript
 * const [onChange, textChange$] = useObservableCallback<
 *  string,
 *  React.FormEvent<HTMLInputElement>
 * >(pluckCurrentTargetValue)
 * ```
 *
 */
function pluckCurrentTargetValue(event$) {
    return operators_1.pluck('currentTarget', 'value')(event$);
}
exports.pluckCurrentTargetValue = pluckCurrentTargetValue;
/**
 * Maps an Observable of DOM events to an Observable
 * of the currentTarget checked.
 *
 * Example:
 *
 * ```typescript
 * const [onChange, checked$] = useObservableCallback<
 *  boolean,
 *  React.FormEvent<HTMLInputElement>
 * >(pluckCurrentTargetChecked)
 * ```
 *
 */
function pluckCurrentTargetChecked(event$) {
    return operators_1.pluck('currentTarget', 'checked')(event$);
}
exports.pluckCurrentTargetChecked = pluckCurrentTargetChecked;
/**
 * Return an empty Subject
 * @ignore
 */
function getEmptySubject() {
    return new rxjs_1.Subject();
}
exports.getEmptySubject = getEmptySubject;
/**
 * One-time ref init.
 * @param init A function that returns a value. Will be called only once.
 * @returns A ref object with the returned value.
 */
function useRefFn(init) {
    var firstRef = react_1.useRef(true);
    var ref = react_1.useRef(null);
    if (firstRef.current) {
        firstRef.current = false;
        ref.current = init();
    }
    return ref;
}
exports.useRefFn = useRefFn;
/**
 * Force re-renders Component.
 */
function useForceUpdate() {
    var updateState = react_1.useState(0)[1];
    return react_1.useRef(function () { return updateState(increment); }).current;
}
exports.useForceUpdate = useForceUpdate;
function increment(n) {
    return (n + 1) % 1000000;
}
/**
 * Prevent React warning when using useLayoutEffect on server.
 */
exports.useIsomorphicLayoutEffect = typeof window !== 'undefined' &&
    typeof window.document !== 'undefined' &&
    typeof window.document.createElement !== 'undefined'
    ? react_1.useLayoutEffect
    : /* istanbul ignore next: both are not called on server */
        react_1.useEffect;
//# sourceMappingURL=helpers.js.map