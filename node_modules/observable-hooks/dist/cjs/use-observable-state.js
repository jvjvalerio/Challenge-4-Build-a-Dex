"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useObservableState = void 0;
var rxjs_1 = require("rxjs");
var react_1 = require("react");
var use_subscription_1 = require("./use-subscription");
var helpers_1 = require("./helpers");
function useObservableState(state$OrInit, initialState) {
    var _a = react_1.useState(initialState), state = _a[0], setState = _a[1];
    var callback;
    var state$;
    if (rxjs_1.isObservable(state$OrInit)) {
        state$ = state$OrInit;
    }
    else {
        var init_1 = state$OrInit;
        // Even though hooks are under conditional block
        // it is for a completely different use case
        // which unlikely coexists with the other one.
        // A warning is also added to the docs.
        var input$Ref_1 = helpers_1.useRefFn(helpers_1.getEmptySubject);
        state$ = helpers_1.useRefFn(function () { return init_1(input$Ref_1.current, state); }).current;
        callback = react_1.useRef(function (state) { return input$Ref_1.current.next(state); }).current;
    }
    use_subscription_1.useSubscription(state$, setState);
    // Display state in React DevTools.
    react_1.useDebugValue(state);
    return callback ? [state, callback] : state;
}
exports.useObservableState = useObservableState;
//# sourceMappingURL=use-observable-state.js.map