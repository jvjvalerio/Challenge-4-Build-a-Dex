import { Provider } from '@ethersproject/providers';
interface TOptions {
    /**
     * (number) :: if >0 use polling, else use instead of onBlock event
     */
    pollTime?: number;
    /**
     * (TEthersProvider)
     */
    provider?: Provider | undefined;
    /**
     * (boolean) :: invoke the callback after initialization
     */
    leadingTrigger?: boolean;
}
/**
 * A combination of useOnBlock and usePoller
 * helper hook to call a function regularly at time intervals when the block changes
 * @param provider ethers/web3 provider
 * @param callback any function
 * @param args function parameters
 */
/**
 * A combination of useOnBlock and usePoller
 * - the hook will invoke a callback regularly on the "block" event.  If a pollTime is provided,
 * it will use that instead.
 * - the hook will invoke the callback when the leadTrigger changes state to true as a leading invokation
 * @param callback (func) :: callback funciton, can have variable args
 * @param options (TOptions)
 * @param args varargs callback function arguments
 */
export declare const useOnRepetition: (callback: (..._args: any[]) => void | Promise<void>, options: TOptions, ...args: any[]) => void;
export {};
//# sourceMappingURL=useOnRepetition.d.ts.map