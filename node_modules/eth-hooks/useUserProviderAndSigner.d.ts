import { TEthersProvider, TProviderAndSigner, TEthersProviderOrSigner } from "./models";
/**
 *  Gets user provider/signer from injected provider or local provider
 *  Use your injected provider from ðŸ¦Š Metamask
 *  If you don't have it then instantly generate a ðŸ”¥ burner wallet from a local provider
 *
  ~ Features ~
  - Specify the injected provider from Metamask
  - Specify the local provider
  - Usage examples:
    const tx = Transactor(userSigner, gasPrice)
 * @param injectedProviderOrSigner (TEthersProviderOrSigner) :: injected provider/signer from metamask etc..
 * @param localProvider (TEthersProvider) local provider to generate a burner wallet from
 * @param useBurnerWallet (boolean) lets the hook know wether to use the burner wallet or not
 * @returns (TProviderAndSigner)
 */
export declare const useUserProviderAndSigner: (injectedProviderOrSigner: TEthersProviderOrSigner | undefined, localProvider: TEthersProvider, useBurnerWallet: boolean) => TProviderAndSigner | undefined;
//# sourceMappingURL=useUserProviderAndSigner.d.ts.map