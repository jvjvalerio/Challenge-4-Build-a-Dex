import { BigNumber } from '@ethersproject/bignumber';
import { useCallback, useState } from 'react';
import { useOnRepetition } from "../../useOnRepetition";
/**
 * Get the balance of an ERC20 token in an address
 *
 * ~ Features ~
  - Provide address and get balance corresponding to given address
  - Change provider to access balance on different chains (ex. mainnetProvider)
  - If no pollTime is passed, the balance will update on every new block
 * @param contract (ethers->Contract) contract object for the ERC20 token
 * @param address (string)
 * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event
 * @returns (BigNumber) :: balance
 */
export const useTokenBalance = (contract, address, pollTime = 0) => {
    const [balance, setBalance] = useState(BigNumber.from(0));
    const pollBalance = useCallback(async () => {
        if (contract != null) {
            try {
                // eslint-disable-next-line
                const newBalance = await contract.balanceOf(address);
                if (newBalance !== balance) {
                    setBalance(newBalance);
                }
            }
            catch (e) {
                console.log('âš  Could not get token balance', e);
            }
        }
    }, [address, balance, contract]);
    useOnRepetition(pollBalance, { pollTime, leadingTrigger: (contract === null || contract === void 0 ? void 0 : contract.provider) != null });
    return balance;
};
