import { useEffect, useRef } from 'react';
/**
 * @see useOnRepetition for a newer implementation
 * helper hook to call a function regularly in time intervals
 * @param callbackFn
 * @param delay
 * @param extraWatch
 */
export const usePoller = (callbackFn, delay, extraWatch = false) => {
    const savedCallback = useRef();
    // Remember the latest fn.
    useEffect(() => {
        savedCallback.current = callbackFn;
    }, [callbackFn]);
    // Set up the interval.
    useEffect(() => {
        const tick = () => {
            if (savedCallback.current)
                savedCallback.current();
        };
        if (delay !== null && delay > 0) {
            const id = setInterval(tick, delay);
            return () => clearInterval(id);
        }
    }, [delay]);
    // run at start too
    useEffect(() => {
        if (savedCallback.current && delay > 0)
            savedCallback.current();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [extraWatch]);
};
