"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class StarkWareProvider {
    constructor(authereum) {
        this.send = (method, params) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'providerRpc',
                params: {
                    method,
                    params
                }
            });
        });
        this.getStarkKey = () => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkAccount'
            });
        });
        this.getPublicKey = () => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkPublicKey'
            });
        });
        this.getEthAddress = () => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkEthAddress'
            });
        });
        this.signNonce = (nonce) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkSignNonce',
                params: {
                    nonce
                }
            });
        });
        this.starkSignMessage = (message) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkSignMessage',
                params: {
                    message
                }
            });
        });
        this.setContractAddress = (contractAddress) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkContractAddress',
                params: {
                    contractAddress
                }
            });
        });
        this.getContractAddress = () => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkContractAddress'
            });
        });
        this.registerUser = (ethKey, operatorSignature) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkRegisterUser',
                params: {
                    ethKey,
                    operatorSignature
                }
            });
        });
        this.deposit = (input) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkDeposit',
                params: input
            });
        });
        this.depositEth = (vaultId, amount, quantum) => __awaiter(this, void 0, void 0, function* () {
            return this.deposit({
                vaultId,
                amount,
                assetStandard: 'ETH',
                quantum
            });
        });
        this.depositErc20 = (vaultId, amount, quantum, token) => __awaiter(this, void 0, void 0, function* () {
            return this.deposit({
                vaultId,
                amount,
                assetStandard: 'ERC20',
                quantum,
                assetContractAddress: token
            });
        });
        this.depositErc721 = (vaultId, tokenId, token) => __awaiter(this, void 0, void 0, function* () {
            return this.deposit({
                vaultId,
                amount: tokenId,
                assetStandard: 'ERC721',
                assetContractAddress: token
            });
        });
        this.cancelDeposit = (vaultId, assetType) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkDepositCancel',
                params: {
                    assetType,
                    vaultId
                }
            });
        });
        this.cancelEthDeposit = (vaultId, quantum) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkDepositCancel',
                params: {
                    vaultId,
                    quantum,
                    assetStandard: 'ETH'
                }
            });
        });
        this.cancelErc20Deposit = (vaultId, quantum, token) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkDepositCancel',
                params: {
                    vaultId,
                    quantum,
                    token,
                    assetStandard: 'ERC20'
                }
            });
        });
        this.cancelErc721Deposit = (vaultId, tokenId, token) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkDepositCancel',
                params: {
                    vaultId,
                    tokenId,
                    token,
                    assetStandard: 'ERC721'
                }
            });
        });
        this.reclaimDeposit = (vaultId, assetType) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkDepositReclaim',
                params: {
                    assetType,
                    vaultId
                }
            });
        });
        this.reclaimEthDeposit = (vaultId, quantum) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkDepositReclaim',
                params: {
                    vaultId,
                    quantum,
                    assetStandard: 'ETH'
                }
            });
        });
        this.reclaimErc20Deposit = (vaultId, quantum, token) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkDepositReclaim',
                params: {
                    vaultId,
                    quantum,
                    token,
                    assetStandard: 'ERC20'
                }
            });
        });
        this.reclaimErc721Deposit = (vaultId, tokenId, token) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkDepositReclaim',
                params: {
                    vaultId,
                    tokenId,
                    token,
                    assetStandard: 'ERC721'
                }
            });
        });
        this.withdraw = (assetStandard, quantum = '1', assetContractAddress = null, recipient) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkWithdrawTo',
                params: {
                    assetStandard,
                    quantum,
                    assetContractAddress,
                    recipient
                }
            });
        });
        this.withdrawEth = (quantum, recipient) => __awaiter(this, void 0, void 0, function* () {
            return this.withdraw('ETH', quantum, null, recipient);
        });
        this.withdrawErc20 = (quantum, token, recipient) => __awaiter(this, void 0, void 0, function* () {
            return this.withdraw('ERC20', quantum, token, recipient);
        });
        this.withdrawErc721 = (tokenId, token, recipient) => __awaiter(this, void 0, void 0, function* () {
            return this.withdraw('ERC721', tokenId, token, recipient);
        });
        this.fullWithdrawalRequest = (vaultId) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkFullWithdrawalRequest',
                params: {
                    vaultId
                }
            });
        });
        this.withdrawAndMint = (assetType, mintingBlob) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkWithdrawAndMint',
                params: {
                    assetType,
                    mintingBlob
                }
            });
        });
        this.freezeRequest = (vaultId) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkFreezeRequest',
                params: {
                    vaultId
                }
            });
        });
        this.escape = (vaultId, assetType, quantizedAmount) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkEscape',
                params: {
                    vaultId,
                    assetType,
                    quantizedAmount
                }
            });
        });
        this.transfer = (input) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkTransfer',
                params: input
            });
        });
        this.transferEth = (input) => __awaiter(this, void 0, void 0, function* () {
            input.assetStandard = 'ETH';
            return this.authereum._postMessageToChild({
                method: 'starkTransfer',
                params: input
            });
        });
        this.transferErc20 = (input) => __awaiter(this, void 0, void 0, function* () {
            input.assetStandard = 'ERC20';
            return this.authereum._postMessageToChild({
                method: 'starkTransfer',
                params: input
            });
        });
        this.transferErc721 = (input) => __awaiter(this, void 0, void 0, function* () {
            input.assetStandard = 'ERC721';
            return this.authereum._postMessageToChild({
                method: 'starkTransfer',
                params: input
            });
        });
        this.createOrder = (input) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkCreateOrder',
                params: input
            });
        });
        this.getAssetType = (input) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkAssetType',
                params: input
            });
        });
        this.getConditionHash = (...params) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum._postMessageToChild({
                method: 'starkConditionHash',
                params
            });
        });
        this.signTransaction = (tx) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum.signTransaction(tx);
        });
        this.sendTransaction = (tx) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum.sendTransaction(tx);
        });
        this.signMessage = (msg, opts) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum.signMessage(msg, opts);
        });
        this.signPersonalMessage = (msg) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum.signPersonalMessage(msg);
        });
        this.getAccountAddress = () => __awaiter(this, void 0, void 0, function* () {
            return this.authereum.getAccountAddress();
        });
        this.estimateGas = (tx) => __awaiter(this, void 0, void 0, function* () {
            return this.authereum.estimateGas(tx);
        });
        this.authereum = authereum;
    }
}
exports.default = StarkWareProvider;
