{"ast":null,"code":"var _jsxFileName = \"/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/DEX.jsx\",\n    _s = $RefreshSig$();\n\nimport { Card, Col, Divider, Input, Row } from \"antd\";\nimport { useBalance, useContractReader, useBlockNumber } from \"eth-hooks\";\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\nimport { useTokenBalance } from \"eth-hooks/erc/erc-20/useTokenBalance\";\nimport { ethers } from \"ethers\";\nimport React, { useState } from \"react\";\nimport Address from \"./Address\";\nimport Contract from \"./Contract\";\nimport Curve from \"./Curve\";\nimport TokenBalance from \"./TokenBalance\";\nimport Blockies from \"react-blockies\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractName = \"DEX\";\nconst tokenName = \"Balloons\";\nexport default function Dex(props) {\n  _s();\n\n  let display = [];\n  const [form, setForm] = useState({});\n  const [values, setValues] = useState({});\n  const tx = props.tx;\n  const writeContracts = props.writeContracts;\n  const contractAddress = props.readContracts[contractName].address;\n  const tokenAddress = props.readContracts[tokenName].address;\n  const contractBalance = useBalance(props.localProvider, contractAddress);\n  const tokenBalance = useTokenBalance(props.readContracts[tokenName], contractAddress, props.localProvider);\n  const tokenBalanceFloat = parseFloat(ethers.utils.formatEther(tokenBalance));\n  const ethBalanceFloat = parseFloat(ethers.utils.formatEther(contractBalance));\n  const liquidity = useContractReader(props.readContracts, contractName, \"totalLiquidity\");\n\n  const rowForm = (title, icon, onClick) => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        span: 8,\n        style: {\n          textAlign: \"right\",\n          opacity: 0.333,\n          paddingRight: 6,\n          fontSize: 24\n        },\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        span: 16,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            cursor: \"pointer\",\n            margin: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            onChange: e => {\n              let newValues = { ...values\n              };\n              newValues[title] = e.target.value;\n              setValues(newValues);\n            },\n            value: values[title],\n            addonAfter: /*#__PURE__*/_jsxDEV(\"div\", {\n              type: \"default\",\n              onClick: () => {\n                onClick(values[title]);\n                let newValues = { ...values\n                };\n                newValues[title] = \"\";\n                setValues(newValues);\n              },\n              children: icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  };\n\n  if (props.readContracts && props.readContracts[contractName]) {\n    display.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [rowForm(\"ethToToken\", \"💸\", async value => {\n        let valueInEther = ethers.utils.parseEther(\"\" + value);\n        let valuePlusExtra = ethers.utils.parseEther(\"\" + value * 1.03);\n        console.log(\"valuePlusExtra\", valuePlusExtra);\n        let swapEthToTokenResult = await tx(writeContracts[contractName][\"ethToToken\"]({\n          value: valuePlusExtra\n        }));\n        console.log(\"swapEthToTokenResult:\", swapEthToTokenResult);\n      }), rowForm(\"tokenToEth\", \"🔏\", async value => {\n        let valueInEther = ethers.utils.parseEther(\"\" + value);\n        console.log(\"valueInEther\", valueInEther);\n        let valuePlusExtra = ethers.utils.parseEther(\"\" + value * 1.03);\n        console.log(\"valuePlusExtra\", valuePlusExtra);\n        let allowance = await props.readContracts[tokenName].allowance(props.address, props.readContracts[contractName].address);\n        console.log(\"allowance\", allowance);\n        let approveTx;\n\n        if (allowance.lt(valuePlusExtra)) {\n          approveTx = await tx(writeContracts[tokenName].approve(props.readContracts[contractName].address, valuePlusExtra, {\n            gasLimit: 200000\n          }));\n        }\n\n        let swapTx = tx(writeContracts[contractName][\"tokenToEth\"](valuePlusExtra, {\n          gasLimit: 200000\n        }));\n\n        if (approveTx) {\n          console.log(\"waiting on approve to finish...\");\n          let approveTxResult = await approveTx;\n          console.log(\"approveTxResult:\", approveTxResult);\n        }\n\n        let swapTxResult = await swapTx;\n        console.log(\"swapTxResult:\", swapTxResult);\n      }), /*#__PURE__*/_jsxDEV(Divider, {\n        children: [\" Liquidity (\", liquidity ? ethers.utils.formatEther(liquidity) : \"none\", \"):\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), rowForm(\"deposit\", \"📥\", async value => {\n        let valueInEther = ethers.utils.parseEther(\"\" + value);\n        let allowance = await props.readContracts[tokenName].allowance(props.address, props.readContracts[contractName].address);\n        console.log(\"allowance\", allowance);\n\n        if (allowance.lt(valueInEther)) {\n          await tx(writeContracts[tokenName].approve(props.readContracts[contractName].address, valueInEther, {\n            gasLimit: 200000\n          }));\n        }\n\n        await tx(writeContracts[contractName][\"deposit\"]({\n          value: valueInEther,\n          gasLimit: 200000\n        }));\n      }), rowForm(\"withdraw\", \"📤\", async value => {\n        let valueInEther = ethers.utils.parseEther(\"\" + value);\n        let withdrawTxResult = await tx(writeContracts[contractName][\"withdraw\"](valueInEther));\n        console.log(\"withdrawTxResult:\", withdrawTxResult);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    span: 24,\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      span: 12,\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        title: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Address, {\n            value: contractAddress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              float: \"right\",\n              fontSize: 24\n            },\n            children: [parseFloat(ethers.utils.formatEther(contractBalance)).toFixed(4), \" \\u2696\\uFE0F\", /*#__PURE__*/_jsxDEV(TokenBalance, {\n              name: tokenName,\n              img: \"🎈\",\n              address: contractAddress,\n              contracts: props.readContracts\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this),\n        size: \"large\",\n        loading: false,\n        children: display\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        span: 12,\n        children: /*#__PURE__*/_jsxDEV(Contract, {\n          name: \"Balloons\",\n          signer: props.signer,\n          provider: props.localProvider,\n          show: [\"balanceOf\", \"approve\"],\n          address: props.address,\n          blockExplorer: props.blockExplorer,\n          contractConfig: props.contractConfig\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      span: 12,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: 20\n        },\n        children: /*#__PURE__*/_jsxDEV(Curve, {\n          addingEth: values && values[\"ethToToken\"] ? values[\"ethToToken\"] : 0,\n          addingToken: values && values[\"tokenToEth\"] ? values[\"tokenToEth\"] : 0,\n          ethReserve: ethBalanceFloat,\n          tokenReserve: tokenBalanceFloat,\n          width: 500,\n          height: 500\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dex, \"yJxcOtlAIWDcMce/aViyGhxQj8Q=\", false, function () {\n  return [useBalance, useTokenBalance, useContractReader];\n});\n\n_c = Dex;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dex\");","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/DEX.jsx"],"names":["Card","Col","Divider","Input","Row","useBalance","useContractReader","useBlockNumber","useEventListener","useTokenBalance","ethers","React","useState","Address","Contract","Curve","TokenBalance","Blockies","contractName","tokenName","Dex","props","display","form","setForm","values","setValues","tx","writeContracts","contractAddress","readContracts","address","tokenAddress","contractBalance","localProvider","tokenBalance","tokenBalanceFloat","parseFloat","utils","formatEther","ethBalanceFloat","liquidity","rowForm","title","icon","onClick","textAlign","opacity","paddingRight","fontSize","cursor","margin","e","newValues","target","value","push","valueInEther","parseEther","valuePlusExtra","console","log","swapEthToTokenResult","allowance","approveTx","lt","approve","gasLimit","swapTx","approveTxResult","swapTxResult","withdrawTxResult","float","toFixed","signer","blockExplorer","contractConfig","padding"],"mappings":"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","sourcesContent":["import { Card, Col, Divider, Input, Row } from \"antd\";\nimport { useBalance, useContractReader, useBlockNumber } from \"eth-hooks\";\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\nimport { useTokenBalance } from \"eth-hooks/erc/erc-20/useTokenBalance\";\nimport { ethers } from \"ethers\";\nimport React, { useState } from \"react\";\nimport Address from \"./Address\";\nimport Contract from \"./Contract\";\nimport Curve from \"./Curve\";\nimport TokenBalance from \"./TokenBalance\";\nimport Blockies from \"react-blockies\";\n\nconst contractName = \"DEX\";\nconst tokenName = \"Balloons\";\n\nexport default function Dex(props) {\n  let display = [];\n\n  const [form, setForm] = useState({});\n  const [values, setValues] = useState({});\n  const tx = props.tx;\n\n  const writeContracts = props.writeContracts;\n\n  const contractAddress = props.readContracts[contractName].address;\n  const tokenAddress = props.readContracts[tokenName].address;\n  const contractBalance = useBalance(props.localProvider, contractAddress);\n\n  const tokenBalance = useTokenBalance(props.readContracts[tokenName], contractAddress, props.localProvider);\n  const tokenBalanceFloat = parseFloat(ethers.utils.formatEther(tokenBalance));\n  const ethBalanceFloat = parseFloat(ethers.utils.formatEther(contractBalance));\n  const liquidity = useContractReader(props.readContracts, contractName, \"totalLiquidity\");\n\n  const rowForm = (title, icon, onClick) => {\n    return (\n      <Row>\n        <Col span={8} style={{ textAlign: \"right\", opacity: 0.333, paddingRight: 6, fontSize: 24 }}>\n          {title}\n        </Col>\n        <Col span={16}>\n          <div style={{ cursor: \"pointer\", margin: 2 }}>\n            <Input\n              onChange={e => {\n                let newValues = { ...values };\n                newValues[title] = e.target.value;\n                setValues(newValues);\n              }}\n              value={values[title]}\n              addonAfter={\n                <div\n                  type=\"default\"\n                  onClick={() => {\n                    onClick(values[title]);\n                    let newValues = { ...values };\n                    newValues[title] = \"\";\n                    setValues(newValues);\n                  }}\n                >\n                  {icon}\n                </div>\n              }\n            />\n          </div>\n        </Col>\n      </Row>\n    );\n  };\n\n  if (props.readContracts && props.readContracts[contractName]) {\n    display.push(\n      <div>\n        {rowForm(\"ethToToken\", \"💸\", async value => {\n          let valueInEther = ethers.utils.parseEther(\"\" + value);\n          let valuePlusExtra = ethers.utils.parseEther(\"\" + value * 1.03);\n          console.log(\"valuePlusExtra\", valuePlusExtra);\n          let swapEthToTokenResult = await tx(writeContracts[contractName][\"ethToToken\"]({ value: valuePlusExtra }));\n          console.log(\"swapEthToTokenResult:\", swapEthToTokenResult);\n        })}\n\n        {rowForm(\"tokenToEth\", \"🔏\", async value => {\n          let valueInEther = ethers.utils.parseEther(\"\" + value);\n          console.log(\"valueInEther\", valueInEther);\n          let valuePlusExtra = ethers.utils.parseEther(\"\" + value * 1.03);\n          console.log(\"valuePlusExtra\", valuePlusExtra);\n          let allowance = await props.readContracts[tokenName].allowance(\n            props.address,\n            props.readContracts[contractName].address,\n          );\n          console.log(\"allowance\", allowance);\n\n          let approveTx;\n          if (allowance.lt(valuePlusExtra)) {\n            approveTx = await tx(\n              writeContracts[tokenName].approve(props.readContracts[contractName].address, valuePlusExtra, {\n                gasLimit: 200000,\n              }),\n            );\n          }\n\n          let swapTx = tx(writeContracts[contractName][\"tokenToEth\"](valuePlusExtra, { gasLimit: 200000 }));\n          if (approveTx) {\n            console.log(\"waiting on approve to finish...\");\n            let approveTxResult = await approveTx;\n            console.log(\"approveTxResult:\", approveTxResult);\n          }\n          let swapTxResult = await swapTx;\n          console.log(\"swapTxResult:\", swapTxResult);\n        })}\n\n        <Divider> Liquidity ({liquidity ? ethers.utils.formatEther(liquidity) : \"none\"}):</Divider>\n\n        {rowForm(\"deposit\", \"📥\", async value => {\n          let valueInEther = ethers.utils.parseEther(\"\" + value);\n          let allowance = await props.readContracts[tokenName].allowance(\n            props.address,\n            props.readContracts[contractName].address,\n          );\n          console.log(\"allowance\", allowance);\n          if (allowance.lt(valueInEther)) {\n            await tx(\n              writeContracts[tokenName].approve(props.readContracts[contractName].address, valueInEther, {\n                gasLimit: 200000,\n              }),\n            );\n          }\n          await tx(writeContracts[contractName][\"deposit\"]({ value: valueInEther, gasLimit: 200000 }));\n        })}\n\n        {rowForm(\"withdraw\", \"📤\", async value => {\n          let valueInEther = ethers.utils.parseEther(\"\" + value);\n          let withdrawTxResult = await tx(writeContracts[contractName][\"withdraw\"](valueInEther));\n          console.log(\"withdrawTxResult:\", withdrawTxResult);\n        })}\n      </div>,\n    );\n  }\n\n  return (\n    <Row span={24}>\n      <Col span={12}>\n        <Card\n          title={\n            <div>\n              <Address value={contractAddress} />\n              <div style={{ float: \"right\", fontSize: 24 }}>\n                {parseFloat(ethers.utils.formatEther(contractBalance)).toFixed(4)} ⚖️\n                <TokenBalance name={tokenName} img={\"🎈\"} address={contractAddress} contracts={props.readContracts} />\n              </div>\n            </div>\n          }\n          size=\"large\"\n          loading={false}\n        >\n          {display}\n        </Card>\n        <Row span={12}>\n          <Contract\n            name=\"Balloons\"\n            signer={props.signer}\n            provider={props.localProvider}\n            show={[\"balanceOf\", \"approve\"]}\n            address={props.address}\n            blockExplorer={props.blockExplorer}\n            contractConfig={props.contractConfig}\n          />\n        </Row>\n      </Col>\n      <Col span={12}>\n        <div style={{ padding: 20 }}>\n          <Curve\n            addingEth={values && values[\"ethToToken\"] ? values[\"ethToToken\"] : 0}\n            addingToken={values && values[\"tokenToEth\"] ? values[\"tokenToEth\"] : 0}\n            ethReserve={ethBalanceFloat}\n            tokenReserve={tokenBalanceFloat}\n            width={500}\n            height={500}\n          />\n        </div>\n      </Col>\n    </Row>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}