{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useBlockNumber } from \"./\";\n/**\n * Get the current timestamp from the latest block\n * @param provider (TEthersProvider)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (number) :: timestamp\n */\n\nexport const useTimestamp = (provider, pollTime) => {\n  const blockNumber = useBlockNumber(provider, pollTime);\n  const [timestamp, setTimestamp] = useState(0);\n  useEffect(() => {\n    const getTimestamp = async () => {\n      const nextBlock = await provider.getBlock(blockNumber);\n\n      if ((nextBlock === null || nextBlock === void 0 ? void 0 : nextBlock.timestamp) != null) {\n        const nextTimestamp = nextBlock.timestamp;\n        setTimestamp(nextTimestamp);\n      }\n    };\n\n    void getTimestamp();\n  }, [blockNumber, provider]);\n  return timestamp;\n};","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/node_modules/eth-hooks/useTimestamp.js"],"names":["useState","useEffect","useBlockNumber","useTimestamp","provider","pollTime","blockNumber","timestamp","setTimestamp","getTimestamp","nextBlock","getBlock","nextTimestamp"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,IAA/B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAChD,QAAMC,WAAW,GAAGJ,cAAc,CAACE,QAAD,EAAWC,QAAX,CAAlC;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,CAAD,CAA1C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,YAAY,GAAG,YAAY;AAC7B,YAAMC,SAAS,GAAG,MAAMN,QAAQ,CAACO,QAAT,CAAkBL,WAAlB,CAAxB;;AACA,UAAI,CAACI,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACH,SAAjE,KAA+E,IAAnF,EAAyF;AACrF,cAAMK,aAAa,GAAGF,SAAS,CAACH,SAAhC;AACAC,QAAAA,YAAY,CAACI,aAAD,CAAZ;AACH;AACJ,KAND;;AAOA,SAAKH,YAAY,EAAjB;AACH,GATQ,EASN,CAACH,WAAD,EAAcF,QAAd,CATM,CAAT;AAUA,SAAOG,SAAP;AACH,CAdM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useBlockNumber } from \"./\";\n/**\n * Get the current timestamp from the latest block\n * @param provider (TEthersProvider)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (number) :: timestamp\n */\nexport const useTimestamp = (provider, pollTime) => {\n    const blockNumber = useBlockNumber(provider, pollTime);\n    const [timestamp, setTimestamp] = useState(0);\n    useEffect(() => {\n        const getTimestamp = async () => {\n            const nextBlock = await provider.getBlock(blockNumber);\n            if ((nextBlock === null || nextBlock === void 0 ? void 0 : nextBlock.timestamp) != null) {\n                const nextTimestamp = nextBlock.timestamp;\n                setTimestamp(nextTimestamp);\n            }\n        };\n        void getTimestamp();\n    }, [blockNumber, provider]);\n    return timestamp;\n};\n"]},"metadata":{},"sourceType":"module"}