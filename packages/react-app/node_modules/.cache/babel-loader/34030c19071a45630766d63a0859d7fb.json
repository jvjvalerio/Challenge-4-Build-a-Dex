{"ast":null,"code":"import _regeneratorRuntime from\"/Users/untitled/challenge-4-single-pool-dex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/untitled/challenge-4-single-pool-dex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/untitled/challenge-4-single-pool-dex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{SendOutlined}from\"@ant-design/icons\";import{Button,Input,Tooltip}from\"antd\";import React,{useState,useEffect}from\"react\";import Blockies from\"react-blockies\";import{Transactor}from\"../helpers\";import Wallet from\"./Wallet\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var _require=require(\"ethers\"),utils=_require.utils;// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/export default function Faucet(props){var _useState=useState(),_useState2=_slicedToArray(_useState,2),address=_useState2[0],setAddress=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),faucetAddress=_useState4[0],setFaucetAddress=_useState4[1];var price=props.price,placeholder=props.placeholder,localProvider=props.localProvider,ensProvider=props.ensProvider;useEffect(function(){var getFaucetAddress=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _faucetAddress;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!localProvider){_context.next=5;break;}_context.next=3;return localProvider.listAccounts();case 3:_faucetAddress=_context.sent;setFaucetAddress(_faucetAddress[0]);case 5:case\"end\":return _context.stop();}}},_callee);}));return function getFaucetAddress(){return _ref.apply(this,arguments);};}();getFaucetAddress();},[localProvider]);var blockie;if(address&&typeof address.toLowerCase===\"function\"){blockie=/*#__PURE__*/_jsx(Blockies,{seed:address.toLowerCase(),size:8,scale:4});}else{blockie=/*#__PURE__*/_jsx(\"div\",{});}var updateAddress=function updateAddress(newValue){if(typeof newValue!==\"undefined\"&&utils.isAddress(newValue)){setAddress(newValue);}};var tx=Transactor(localProvider);return/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(Input,{size:\"large\",placeholder:placeholder?placeholder:\"local faucet\",prefix:blockie,value:address,onChange:function onChange(e){return updateAddress(e.target.value);},suffix:/*#__PURE__*/_jsxs(Tooltip,{title:\"Faucet: Send local ether to an address.\",children:[/*#__PURE__*/_jsx(Button,{onClick:function onClick(){tx({to:address,value:utils.parseEther(\"0.01\")});setAddress(\"\");},shape:\"circle\",icon:/*#__PURE__*/_jsx(SendOutlined,{})}),/*#__PURE__*/_jsx(Wallet,{color:\"#888888\",provider:localProvider,ensProvider:ensProvider,price:price,address:faucetAddress})]})})});}","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/Faucet.jsx"],"names":["SendOutlined","Button","Input","Tooltip","React","useState","useEffect","Blockies","Transactor","Wallet","require","utils","Faucet","props","address","setAddress","faucetAddress","setFaucetAddress","price","placeholder","localProvider","ensProvider","getFaucetAddress","listAccounts","_faucetAddress","blockie","toLowerCase","updateAddress","newValue","isAddress","tx","e","target","value","to","parseEther"],"mappings":"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","sourcesContent":["import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}