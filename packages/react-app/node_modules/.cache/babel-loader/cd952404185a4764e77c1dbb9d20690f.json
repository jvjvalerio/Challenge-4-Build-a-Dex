{"ast":null,"code":"import React from\"react\";import Address from\"../Address\";import{jsx as _jsx}from\"react/jsx-runtime\";var _require=require(\"ethers\"),utils=_require.utils;var tryToDisplay=function tryToDisplay(thing){var asText=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var blockExplorer=arguments.length>2?arguments[2]:undefined;if(thing&&thing.toNumber){try{return thing.toNumber();}catch(e){var displayable=\"Ξ\"+utils.formatUnits(thing,\"ether\");return asText?displayable:/*#__PURE__*/_jsx(\"span\",{style:{overflowWrap:\"break-word\",width:\"100%\"},children:displayable});}}if(thing&&thing.indexOf&&thing.indexOf(\"0x\")===0&&thing.length===42){return asText?thing:/*#__PURE__*/_jsx(Address,{address:thing,fontSize:22,blockExplorer:blockExplorer});}if(thing&&thing.constructor&&thing.constructor.name===\"Array\"){var mostReadable=function mostReadable(v){return[\"number\",\"boolean\"].includes(typeof v)?v:tryToDisplayAsText(v);};var _displayable=JSON.stringify(thing.map(mostReadable));return asText?_displayable:/*#__PURE__*/_jsx(\"span\",{style:{overflowWrap:\"break-word\",width:\"100%\"},children:_displayable.replaceAll(\",\",\",\\n\")});}return JSON.stringify(thing);};var tryToDisplayAsText=function tryToDisplayAsText(thing){return tryToDisplay(thing,true);};export{tryToDisplay,tryToDisplayAsText};","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/Contract/utils.jsx"],"names":["React","Address","require","utils","tryToDisplay","thing","asText","blockExplorer","toNumber","e","displayable","formatUnits","overflowWrap","width","indexOf","length","constructor","name","mostReadable","v","includes","tryToDisplayAsText","JSON","stringify","map","replaceAll"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,C,2CAEA,aAAkBC,OAAO,CAAC,QAAD,CAAzB,CAAQC,KAAR,UAAQA,KAAR,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAA0C,IAAlCC,CAAAA,MAAkC,2DAAzB,KAAyB,IAAlBC,CAAAA,aAAkB,2CAC7D,GAAIF,KAAK,EAAIA,KAAK,CAACG,QAAnB,CAA6B,CAC3B,GAAI,CACF,MAAOH,CAAAA,KAAK,CAACG,QAAN,EAAP,CACD,CAAC,MAAOC,CAAP,CAAU,CACV,GAAMC,CAAAA,WAAW,CAAG,IAAMP,KAAK,CAACQ,WAAN,CAAkBN,KAAlB,CAAyB,OAAzB,CAA1B,CACA,MAAOC,CAAAA,MAAM,CAAGI,WAAH,cAAiB,aAAM,KAAK,CAAE,CAAEE,YAAY,CAAE,YAAhB,CAA8BC,KAAK,CAAE,MAArC,CAAb,UAA6DH,WAA7D,EAA9B,CACD,CACF,CACD,GAAIL,KAAK,EAAIA,KAAK,CAACS,OAAf,EAA0BT,KAAK,CAACS,OAAN,CAAc,IAAd,IAAwB,CAAlD,EAAuDT,KAAK,CAACU,MAAN,GAAiB,EAA5E,CAAgF,CAC9E,MAAOT,CAAAA,MAAM,CAAGD,KAAH,cAAW,KAAC,OAAD,EAAS,OAAO,CAAEA,KAAlB,CAAyB,QAAQ,CAAE,EAAnC,CAAuC,aAAa,CAAEE,aAAtD,EAAxB,CACD,CACD,GAAIF,KAAK,EAAIA,KAAK,CAACW,WAAf,EAA8BX,KAAK,CAACW,WAAN,CAAkBC,IAAlB,GAA2B,OAA7D,CAAsE,CACpE,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,CAAC,QAAK,CAAC,QAAD,CAAW,SAAX,EAAsBC,QAAtB,CAA+B,MAAOD,CAAAA,CAAtC,EAA2CA,CAA3C,CAA+CE,kBAAkB,CAACF,CAAD,CAAtE,EAAtB,CACA,GAAMT,CAAAA,YAAW,CAAGY,IAAI,CAACC,SAAL,CAAelB,KAAK,CAACmB,GAAN,CAAUN,YAAV,CAAf,CAApB,CACA,MAAOZ,CAAAA,MAAM,CACXI,YADW,cAGX,aAAM,KAAK,CAAE,CAAEE,YAAY,CAAE,YAAhB,CAA8BC,KAAK,CAAE,MAArC,CAAb,UAA6DH,YAAW,CAACe,UAAZ,CAAuB,GAAvB,CAA4B,KAA5B,CAA7D,EAHF,CAKD,CACD,MAAOH,CAAAA,IAAI,CAACC,SAAL,CAAelB,KAAf,CAAP,CACD,CAtBD,CAwBA,GAAMgB,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAhB,KAAK,QAAID,CAAAA,YAAY,CAACC,KAAD,CAAQ,IAAR,CAAhB,EAAhC,CAEA,OAASD,YAAT,CAAuBiB,kBAAvB","sourcesContent":["import React from \"react\";\nimport Address from \"../Address\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\n  }\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\n    const displayable = JSON.stringify(thing.map(mostReadable));\n    return asText ? (\n      displayable\n    ) : (\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\n    );\n  }\n  return JSON.stringify(thing);\n};\n\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\n\nexport { tryToDisplay, tryToDisplayAsText };\n"]},"metadata":{},"sourceType":"module"}