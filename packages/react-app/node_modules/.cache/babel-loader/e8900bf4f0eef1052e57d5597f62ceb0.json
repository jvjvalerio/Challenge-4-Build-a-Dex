{"ast":null,"code":"import { utils } from 'ethers';\nimport { useState, useEffect } from 'react';\n\nconst lookupAddress = async (provider, address) => {\n  if (utils.isAddress(address)) {\n    try {\n      // Accuracy of reverse resolution is not enforced.\n      // We then manually ensure that the reported ens name resolves to address\n      const reportedName = await provider.lookupAddress(address);\n      const resolvedAddress = await provider.resolveName(reportedName);\n\n      if (address && utils.getAddress(address) === utils.getAddress(resolvedAddress)) {\n        return reportedName;\n      } else {\n        return utils.getAddress(address);\n      }\n    } catch (e) {\n      return utils.getAddress(address);\n    }\n  }\n\n  return '';\n};\n/**\n * Gets ENS name from given address and provider\n * @param provider (TEthersProvider)\n * @param address (string)\n * @returns (string) ens name\n */\n\n\nexport const useLookupAddress = (provider, address) => {\n  const [ensName, setEnsName] = useState(address);\n  useEffect(() => {\n    const storedData = window.localStorage.getItem('ensCache_' + address);\n    const cache = JSON.parse(storedData !== null && storedData !== void 0 ? storedData : '{}');\n\n    if (cache && (cache === null || cache === void 0 ? void 0 : cache.name) && (cache === null || cache === void 0 ? void 0 : cache.timestamp) > Date.now()) {\n      setEnsName(cache === null || cache === void 0 ? void 0 : cache.name);\n    } else if (provider) {\n      void lookupAddress(provider, address).then(name => {\n        if (name) {\n          setEnsName(name);\n          window.localStorage.setItem('ensCache_' + address, JSON.stringify({\n            timestamp: Date.now() + 360000,\n            name\n          }));\n        }\n      });\n    }\n  }, [address, provider, setEnsName]);\n  return ensName;\n};","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/node_modules/eth-hooks/dapps/ens/useLookupAddress.js"],"names":["utils","useState","useEffect","lookupAddress","provider","address","isAddress","reportedName","resolvedAddress","resolveName","getAddress","e","useLookupAddress","ensName","setEnsName","storedData","window","localStorage","getItem","cache","JSON","parse","name","timestamp","Date","now","then","setItem","stringify"],"mappings":"AAAA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AACA,MAAMC,aAAa,GAAG,OAAOC,QAAP,EAAiBC,OAAjB,KAA6B;AAC/C,MAAIL,KAAK,CAACM,SAAN,CAAgBD,OAAhB,CAAJ,EAA8B;AAC1B,QAAI;AACA;AACA;AACA,YAAME,YAAY,GAAG,MAAMH,QAAQ,CAACD,aAAT,CAAuBE,OAAvB,CAA3B;AACA,YAAMG,eAAe,GAAG,MAAMJ,QAAQ,CAACK,WAAT,CAAqBF,YAArB,CAA9B;;AACA,UAAIF,OAAO,IAAIL,KAAK,CAACU,UAAN,CAAiBL,OAAjB,MAA8BL,KAAK,CAACU,UAAN,CAAiBF,eAAjB,CAA7C,EAAgF;AAC5E,eAAOD,YAAP;AACH,OAFD,MAGK;AACD,eAAOP,KAAK,CAACU,UAAN,CAAiBL,OAAjB,CAAP;AACH;AACJ,KAXD,CAYA,OAAOM,CAAP,EAAU;AACN,aAAOX,KAAK,CAACU,UAAN,CAAiBL,OAAjB,CAAP;AACH;AACJ;;AACD,SAAO,EAAP;AACH,CAnBD;AAoBA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMO,gBAAgB,GAAG,CAACR,QAAD,EAAWC,OAAX,KAAuB;AACnD,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAACI,OAAD,CAAtC;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,UAAU,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,cAAcb,OAA1C,CAAnB;AACA,UAAMc,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWN,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+CA,UAA/C,GAA4D,IAAvE,CAAd;;AACA,QAAII,KAAK,KAAKA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACG,IAAzD,CAAL,IAAuE,CAACH,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACI,SAArD,IAAkEC,IAAI,CAACC,GAAL,EAA7I,EAAyJ;AACrJX,MAAAA,UAAU,CAACK,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACG,IAArD,CAAV;AACH,KAFD,MAGK,IAAIlB,QAAJ,EAAc;AACf,WAAKD,aAAa,CAACC,QAAD,EAAWC,OAAX,CAAb,CAAiCqB,IAAjC,CAAuCJ,IAAD,IAAU;AACjD,YAAIA,IAAJ,EAAU;AACNR,UAAAA,UAAU,CAACQ,IAAD,CAAV;AACAN,UAAAA,MAAM,CAACC,YAAP,CAAoBU,OAApB,CAA4B,cAActB,OAA1C,EAAmDe,IAAI,CAACQ,SAAL,CAAe;AAC9DL,YAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,KAAa,MADsC;AAE9DH,YAAAA;AAF8D,WAAf,CAAnD;AAIH;AACJ,OARI,CAAL;AASH;AACJ,GAjBQ,EAiBN,CAACjB,OAAD,EAAUD,QAAV,EAAoBU,UAApB,CAjBM,CAAT;AAkBA,SAAOD,OAAP;AACH,CArBM","sourcesContent":["import { utils } from 'ethers';\nimport { useState, useEffect } from 'react';\nconst lookupAddress = async (provider, address) => {\n    if (utils.isAddress(address)) {\n        try {\n            // Accuracy of reverse resolution is not enforced.\n            // We then manually ensure that the reported ens name resolves to address\n            const reportedName = await provider.lookupAddress(address);\n            const resolvedAddress = await provider.resolveName(reportedName);\n            if (address && utils.getAddress(address) === utils.getAddress(resolvedAddress)) {\n                return reportedName;\n            }\n            else {\n                return utils.getAddress(address);\n            }\n        }\n        catch (e) {\n            return utils.getAddress(address);\n        }\n    }\n    return '';\n};\n/**\n * Gets ENS name from given address and provider\n * @param provider (TEthersProvider)\n * @param address (string)\n * @returns (string) ens name\n */\nexport const useLookupAddress = (provider, address) => {\n    const [ensName, setEnsName] = useState(address);\n    useEffect(() => {\n        const storedData = window.localStorage.getItem('ensCache_' + address);\n        const cache = JSON.parse(storedData !== null && storedData !== void 0 ? storedData : '{}');\n        if (cache && (cache === null || cache === void 0 ? void 0 : cache.name) && (cache === null || cache === void 0 ? void 0 : cache.timestamp) > Date.now()) {\n            setEnsName(cache === null || cache === void 0 ? void 0 : cache.name);\n        }\n        else if (provider) {\n            void lookupAddress(provider, address).then((name) => {\n                if (name) {\n                    setEnsName(name);\n                    window.localStorage.setItem('ensCache_' + address, JSON.stringify({\n                        timestamp: Date.now() + 360000,\n                        name,\n                    }));\n                }\n            });\n        }\n    }, [address, provider, setEnsName]);\n    return ensName;\n};\n"]},"metadata":{},"sourceType":"module"}