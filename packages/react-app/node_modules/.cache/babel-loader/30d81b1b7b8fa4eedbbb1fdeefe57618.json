{"ast":null,"code":"import _regeneratorRuntime from\"/Users/untitled/challenge-4-single-pool-dex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/untitled/challenge-4-single-pool-dex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/untitled/challenge-4-single-pool-dex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Select}from\"antd\";import{useLookupAddress}from\"eth-hooks/dapps/ens\";import React,{useCallback,useState}from\"react\";import QrReader from\"react-qr-reader\";import Blockie from\"./Blockie\";import{ethers}from\"ethers\";import{useMemo}from\"react\";// probably we need to change value={toAddress} to address={toAddress}\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <MultiAddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var isENS=function isENS(){var address=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"\";return address.endsWith(\".eth\")||address.endsWith(\".xyz\");};export default function MultiAddressInput(props){var ensProvider=props.ensProvider,onChange=props.onChange;var _useState=useState(props.value||[]),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),searchResults=_useState4[0],setSearchResults=_useState4[1];var children=useMemo(function(){if(searchResults.length<1){return[];}// use search result to format children\nreturn searchResults.map(function(i){var _i$address,_i$address2;return/*#__PURE__*/_jsx(Select.Option,{value:i.address,children:/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",alignItems:\"center\"},children:[/*#__PURE__*/_jsx(\"div\",{style:{marginRight:\"3px\"},children:/*#__PURE__*/_jsx(Blockie,{address:i.address,size:5,scale:3})}),i.ens?i.ens:((_i$address=i.address)===null||_i$address===void 0?void 0:_i$address.substr(0,5))+\"...\"+((_i$address2=i.address)===null||_i$address2===void 0?void 0:_i$address2.substr(-4))]})},i.address);});},[searchResults.length]);// const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n// const ens = useLookupAddress(props.ensProvider, currentValue);\nvar manageSearch=useCallback(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(newValue){var address,isResolvedAddress,possibleAddress,possibleENS;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(typeof newValue!==\"undefined\")){_context.next=27;break;}address=newValue;isResolvedAddress=true;if(!isENS(address)){_context.next=15;break;}_context.prev=4;_context.next=7;return ensProvider.resolveName(address);case 7:possibleAddress=_context.sent;if(possibleAddress){isResolvedAddress=true;address=possibleAddress;}// eslint-disable-next-line no-empty\n_context.next=13;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](4);case 13:_context.next=26;break;case 15:if(!ethers.utils.isAddress(address)){_context.next=26;break;}_context.prev=16;_context.next=19;return ensProvider.lookupAddress(address);case 19:possibleENS=_context.sent;address=possibleENS;isResolvedAddress=false;_context.next=26;break;case 24:_context.prev=24;_context.t1=_context[\"catch\"](16);case 26:return _context.abrupt(\"return\",{resolvedTo:address,isResolvedAddress:isResolvedAddress});case 27:case\"end\":return _context.stop();}}},_callee,null,[[4,11],[16,24]]);}));return function(_x){return _ref.apply(this,arguments);};}(),[ensProvider,onChange]);var handleSearch=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(val){var formattedVal,resolution,_ref3,_ref4,address,ens;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:console.log(\"Searching: \",val);formattedVal=val.toLowerCase();_context2.next=4;return manageSearch(formattedVal);case 4:resolution=_context2.sent;console.log(resolution);_ref3=resolution.isResolvedAddress?[resolution.resolvedTo,val]:[val,resolution.resolvedTo],_ref4=_slicedToArray(_ref3,2),address=_ref4[0],ens=_ref4[1];if(resolution.resolvedTo!==val){setSearchResults([{address:address,isResolvedAddress:resolution.isResolvedAddress,ens:ens}]);}case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function handleSearch(_x2){return _ref2.apply(this,arguments);};}();var handleOnChange=function handleOnChange(e){console.log(e);setSearchResults([]);setValue(e);if(typeof onChange===\"function\"){onChange(e.map(function(i){return i.value;}));}};// <Blockie address={currentValue} size={8} scale={3} />\nreturn/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Select,{showSearch:true,showArrow:false,defaultActiveFirstOption:false,onSearch:handleSearch,filterOption:false,labelInValue:true,mode:\"multiple\",id:\"0xMultiAddresses\"// name it something other than address for auto fill doxxing\n,name:\"0xMultiAddresses\"// name it something other than address for auto fill doxxing\n,placeholder:props.placeholder?props.placeholder:\"address\",value:value,onChange:handleOnChange,notFoundContent:null,style:{width:\"100%\"},children:children})});}","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/MultiAddressInput.jsx"],"names":["Select","useLookupAddress","React","useCallback","useState","QrReader","Blockie","ethers","useMemo","isENS","address","endsWith","MultiAddressInput","props","ensProvider","onChange","value","setValue","searchResults","setSearchResults","children","length","map","i","display","alignItems","marginRight","ens","substr","manageSearch","newValue","isResolvedAddress","resolveName","possibleAddress","utils","isAddress","lookupAddress","possibleENS","resolvedTo","handleSearch","val","console","log","formattedVal","toLowerCase","resolution","handleOnChange","e","placeholder","width"],"mappings":"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","sourcesContent":["import { Select } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\nimport { ethers } from \"ethers\";\nimport { useMemo } from \"react\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <MultiAddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\nexport default function MultiAddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value || []);\n  const [searchResults, setSearchResults] = useState([]);\n\n  const children = useMemo(() => {\n    if (searchResults.length < 1) {\n      return [];\n    }\n\n    // use search result to format children\n    return searchResults.map(i => (\n      <Select.Option key={i.address} value={i.address}>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <div style={{ marginRight: \"3px\" }}>\n            <Blockie address={i.address} size={5} scale={3} />\n          </div>\n          {i.ens ? i.ens : i.address?.substr(0, 5) + \"...\" + i.address?.substr(-4)}\n        </div>\n      </Select.Option>\n    ));\n  }, [searchResults.length]);\n\n  // const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  // const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const manageSearch = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        let isResolvedAddress = true;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n\n            if (possibleAddress) {\n              isResolvedAddress = true;\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        } else if (ethers.utils.isAddress(address)) {\n          try {\n            const possibleENS = await ensProvider.lookupAddress(address);\n\n            address = possibleENS;\n            isResolvedAddress = false;\n          } catch (e) {}\n        }\n        return { resolvedTo: address, isResolvedAddress };\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const handleSearch = async val => {\n    console.log(`Searching: `, val);\n    const formattedVal = val.toLowerCase();\n    const resolution = await manageSearch(formattedVal);\n\n    console.log(resolution);\n\n    const [address, ens] = resolution.isResolvedAddress ? [resolution.resolvedTo, val] : [val, resolution.resolvedTo];\n\n    if (resolution.resolvedTo !== val) {\n      setSearchResults([{ address, isResolvedAddress: resolution.isResolvedAddress, ens }]);\n    }\n  };\n\n  const handleOnChange = e => {\n    console.log(e);\n    setSearchResults([]);\n    setValue(e);\n\n    if (typeof onChange === \"function\") {\n      onChange(e.map(i => i.value));\n    }\n  };\n\n  // <Blockie address={currentValue} size={8} scale={3} />\n\n  return (\n    <div>\n      <Select\n        showSearch\n        showArrow={false}\n        defaultActiveFirstOption={false}\n        onSearch={handleSearch}\n        filterOption={false}\n        labelInValue={true}\n        mode=\"multiple\"\n        id=\"0xMultiAddresses\" // name it something other than address for auto fill doxxing\n        name=\"0xMultiAddresses\" // name it something other than address for auto fill doxxing\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        value={value}\n        onChange={handleOnChange}\n        notFoundContent={null}\n        style={{ width: \"100%\" }}\n      >\n        {children}\n      </Select>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}