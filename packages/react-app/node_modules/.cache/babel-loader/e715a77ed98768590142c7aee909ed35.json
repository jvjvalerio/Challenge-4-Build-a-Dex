{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { parseProviderOrSigner } from \"./functions\";\n/**\n * Get the address from the current signer or provider\n * @param providerOrSigner (TEthersProviderOrSigner)\n * @returns (string) :: address\n */\n\nexport const useUserAddress = providerOrSigner => {\n  const [userAddress, setUserAddress] = useState('');\n  useEffect(() => {\n    const getUserAddress = async providerOrSigner => {\n      var _a;\n\n      const result = await parseProviderOrSigner(providerOrSigner);\n\n      if (result.signer) {\n        const address = await ((_a = result.signer) === null || _a === void 0 ? void 0 : _a.getAddress());\n        setUserAddress(address);\n      }\n    };\n\n    if (providerOrSigner) void getUserAddress(providerOrSigner);\n  }, [providerOrSigner]);\n  return userAddress;\n};","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/node_modules/eth-hooks/useUserAddress.js"],"names":["useState","useEffect","parseProviderOrSigner","useUserAddress","providerOrSigner","userAddress","setUserAddress","getUserAddress","_a","result","signer","address","getAddress"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,qBAAT,QAAsC,aAAtC;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAIC,gBAAD,IAAsB;AAChD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMM,cAAc,GAAG,MAAOH,gBAAP,IAA4B;AAC/C,UAAII,EAAJ;;AACA,YAAMC,MAAM,GAAG,MAAMP,qBAAqB,CAACE,gBAAD,CAA1C;;AACA,UAAIK,MAAM,CAACC,MAAX,EAAmB;AACf,cAAMC,OAAO,GAAG,OAAO,CAACH,EAAE,GAAGC,MAAM,CAACC,MAAb,MAAyB,IAAzB,IAAiCF,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACI,UAAH,EAAjE,CAAhB;AACAN,QAAAA,cAAc,CAACK,OAAD,CAAd;AACH;AACJ,KAPD;;AAQA,QAAIP,gBAAJ,EACI,KAAKG,cAAc,CAACH,gBAAD,CAAnB;AACP,GAXQ,EAWN,CAACA,gBAAD,CAXM,CAAT;AAYA,SAAOC,WAAP;AACH,CAfM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { parseProviderOrSigner } from \"./functions\";\n/**\n * Get the address from the current signer or provider\n * @param providerOrSigner (TEthersProviderOrSigner)\n * @returns (string) :: address\n */\nexport const useUserAddress = (providerOrSigner) => {\n    const [userAddress, setUserAddress] = useState('');\n    useEffect(() => {\n        const getUserAddress = async (providerOrSigner) => {\n            var _a;\n            const result = await parseProviderOrSigner(providerOrSigner);\n            if (result.signer) {\n                const address = await ((_a = result.signer) === null || _a === void 0 ? void 0 : _a.getAddress());\n                setUserAddress(address);\n            }\n        };\n        if (providerOrSigner)\n            void getUserAddress(providerOrSigner);\n    }, [providerOrSigner]);\n    return userAddress;\n};\n"]},"metadata":{},"sourceType":"module"}