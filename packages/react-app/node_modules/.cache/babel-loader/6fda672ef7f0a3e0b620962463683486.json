{"ast":null,"code":"var _jsxFileName = \"/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/Contract/utils.jsx\";\nimport React from \"react\";\nimport Address from \"../Address\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  utils\n} = require(\"ethers\");\n\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\n      return asText ? displayable : /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          overflowWrap: \"break-word\",\n          width: \"100%\"\n        },\n        children: displayable\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 37\n      }, this);\n    }\n  }\n\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return asText ? thing : /*#__PURE__*/_jsxDEV(Address, {\n      address: thing,\n      fontSize: 22,\n      blockExplorer: blockExplorer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 29\n    }, this);\n  }\n\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\n    const mostReadable = v => [\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v);\n\n    const displayable = JSON.stringify(thing.map(mostReadable));\n    return asText ? displayable : /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        overflowWrap: \"break-word\",\n        width: \"100%\"\n      },\n      children: displayable.replaceAll(\",\", \",\\n\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n\n  return JSON.stringify(thing);\n};\n\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\n\nexport { tryToDisplay, tryToDisplayAsText };","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/Contract/utils.jsx"],"names":["React","Address","utils","require","tryToDisplay","thing","asText","blockExplorer","toNumber","e","displayable","formatUnits","overflowWrap","width","indexOf","length","constructor","name","mostReadable","v","includes","tryToDisplayAsText","JSON","stringify","map","replaceAll"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,YAApB;;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAYC,OAAO,CAAC,QAAD,CAAzB;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAM,GAAG,KAAjB,EAAwBC,aAAxB,KAA0C;AAC7D,MAAIF,KAAK,IAAIA,KAAK,CAACG,QAAnB,EAA6B;AAC3B,QAAI;AACF,aAAOH,KAAK,CAACG,QAAN,EAAP;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV,YAAMC,WAAW,GAAG,MAAMR,KAAK,CAACS,WAAN,CAAkBN,KAAlB,EAAyB,OAAzB,CAA1B;AACA,aAAOC,MAAM,GAAGI,WAAH,gBAAiB;AAAM,QAAA,KAAK,EAAE;AAAEE,UAAAA,YAAY,EAAE,YAAhB;AAA8BC,UAAAA,KAAK,EAAE;AAArC,SAAb;AAAA,kBAA6DH;AAA7D;AAAA;AAAA;AAAA;AAAA,cAA9B;AACD;AACF;;AACD,MAAIL,KAAK,IAAIA,KAAK,CAACS,OAAf,IAA0BT,KAAK,CAACS,OAAN,CAAc,IAAd,MAAwB,CAAlD,IAAuDT,KAAK,CAACU,MAAN,KAAiB,EAA5E,EAAgF;AAC9E,WAAOT,MAAM,GAAGD,KAAH,gBAAW,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,KAAlB;AAAyB,MAAA,QAAQ,EAAE,EAAnC;AAAuC,MAAA,aAAa,EAAEE;AAAtD;AAAA;AAAA;AAAA;AAAA,YAAxB;AACD;;AACD,MAAIF,KAAK,IAAIA,KAAK,CAACW,WAAf,IAA8BX,KAAK,CAACW,WAAN,CAAkBC,IAAlB,KAA2B,OAA7D,EAAsE;AACpE,UAAMC,YAAY,GAAGC,CAAC,IAAK,CAAC,QAAD,EAAW,SAAX,EAAsBC,QAAtB,CAA+B,OAAOD,CAAtC,IAA2CA,CAA3C,GAA+CE,kBAAkB,CAACF,CAAD,CAA5F;;AACA,UAAMT,WAAW,GAAGY,IAAI,CAACC,SAAL,CAAelB,KAAK,CAACmB,GAAN,CAAUN,YAAV,CAAf,CAApB;AACA,WAAOZ,MAAM,GACXI,WADW,gBAGX;AAAM,MAAA,KAAK,EAAE;AAAEE,QAAAA,YAAY,EAAE,YAAhB;AAA8BC,QAAAA,KAAK,EAAE;AAArC,OAAb;AAAA,gBAA6DH,WAAW,CAACe,UAAZ,CAAuB,GAAvB,EAA4B,KAA5B;AAA7D;AAAA;AAAA;AAAA;AAAA,YAHF;AAKD;;AACD,SAAOH,IAAI,CAACC,SAAL,CAAelB,KAAf,CAAP;AACD,CAtBD;;AAwBA,MAAMgB,kBAAkB,GAAGhB,KAAK,IAAID,YAAY,CAACC,KAAD,EAAQ,IAAR,CAAhD;;AAEA,SAASD,YAAT,EAAuBiB,kBAAvB","sourcesContent":["import React from \"react\";\nimport Address from \"../Address\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\n  }\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\n    const displayable = JSON.stringify(thing.map(mostReadable));\n    return asText ? (\n      displayable\n    ) : (\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\n    );\n  }\n  return JSON.stringify(thing);\n};\n\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\n\nexport { tryToDisplay, tryToDisplayAsText };\n"]},"metadata":{},"sourceType":"module"}