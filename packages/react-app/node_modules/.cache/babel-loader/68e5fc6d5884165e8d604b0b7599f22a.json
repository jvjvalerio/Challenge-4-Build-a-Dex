{"ast":null,"code":"var _jsxFileName = \"/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/AddressInput.jsx\",\n    _s = $RefreshSig$();\n\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\nimport { ethers } from \"ethers\"; // probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\nexport default function AddressInput(props) {\n  _s();\n\n  const {\n    ensProvider,\n    onChange\n  } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n  const updateAddress = useCallback(async newValue => {\n    if (typeof newValue !== \"undefined\") {\n      let address = newValue;\n\n      if (isENS(address)) {\n        try {\n          const possibleAddress = await ensProvider.resolveName(address);\n\n          if (possibleAddress) {\n            address = possibleAddress;\n          } // eslint-disable-next-line no-empty\n\n        } catch (e) {}\n      }\n\n      setValue(address);\n\n      if (typeof onChange === \"function\") {\n        onChange(address);\n      }\n    }\n  }, [ensProvider, onChange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [scan ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\"\n      },\n      onClick: () => {\n        setScan(false);\n      },\n      children: /*#__PURE__*/_jsxDEV(QrReader, {\n        delay: 250,\n        resolution: 1200,\n        onError: e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        },\n        onScan: newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        },\n        style: {\n          width: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(Input, {\n      id: \"0xAddress\" // name it something other than address for auto fill doxxing\n      ,\n      name: \"0xAddress\" // name it something other than address for auto fill doxxing\n      ,\n      autoComplete: \"off\",\n      autoFocus: props.autoFocus,\n      placeholder: props.placeholder ? props.placeholder : \"address\",\n      prefix: /*#__PURE__*/_jsxDEV(Blockie, {\n        address: currentValue,\n        size: 8,\n        scale: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this),\n      value: ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue,\n      addonAfter: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 4,\n          cursor: \"pointer\"\n        },\n        onClick: () => {\n          setScan(!scan);\n        },\n        children: [/*#__PURE__*/_jsxDEV(Badge, {\n          count: /*#__PURE__*/_jsxDEV(CameraOutlined, {\n            style: {\n              fontSize: 9\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 27\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(QrcodeOutlined, {\n            style: {\n              fontSize: 18\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), \" \", \"Scan\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this),\n      onChange: e => {\n        updateAddress(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddressInput, \"+Y1/HWX+XHKssCkvQS70MSIqFjc=\", false, function () {\n  return [useLookupAddress];\n});\n\n_c = AddressInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressInput\");","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/AddressInput.jsx"],"names":["CameraOutlined","QrcodeOutlined","Badge","Input","useLookupAddress","React","useCallback","useState","QrReader","Blockie","ethers","isENS","address","endsWith","AddressInput","props","ensProvider","onChange","value","setValue","scan","setScan","currentValue","ens","updateAddress","newValue","possibleAddress","resolveName","e","zIndex","position","left","top","width","console","log","possibleNewValue","indexOf","substr","lastIndexOf","autoFocus","placeholder","utils","isAddress","marginTop","cursor","fontSize","target"],"mappings":"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","sourcesContent":["import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\nimport { ethers } from \"ethers\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\nexport default function AddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  return (\n    <div>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                let possibleNewValue = newValue;\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\n                }\n                setScan(false);\n                updateAddress(possibleNewValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\n        addonAfter={\n          <div\n            style={{ marginTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              setScan(!scan);\n            }}\n          >\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n              <QrcodeOutlined style={{ fontSize: 18 }} />\n            </Badge>{\" \"}\n            Scan\n          </div>\n        }\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}