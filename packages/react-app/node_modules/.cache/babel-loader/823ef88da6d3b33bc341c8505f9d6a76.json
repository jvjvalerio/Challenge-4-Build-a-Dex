{"ast":null,"code":"import { BigNumber } from 'ethers';\nimport { useState, useCallback } from 'react';\nimport { useOnRepetition } from \"./useOnRepetition\";\nconst zero = BigNumber.from(0);\n/**\n * Gets your balance in ETH from given address and provider\n *\n * ~ Features ~\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n * @param provider (ethers->Provider)\n * @param address (string)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (Bignumber) ::  current balance\n */\n\nexport const useBalance = (provider, address, pollTime = 0) => {\n  const [balance, setBalance] = useState();\n  const pollBalance = useCallback(async (provider, address) => {\n    if (provider && address) {\n      const newBalance = await provider.getBalance(address);\n\n      if (!newBalance.eq(balance !== null && balance !== void 0 ? balance : zero)) {\n        setBalance(newBalance);\n        console.log(address, newBalance.toString(), balance);\n      }\n    }\n  }, [balance]);\n  useOnRepetition(pollBalance, {\n    pollTime,\n    provider,\n    leadingTrigger: address != null && address !== '' && provider != null\n  }, provider, address);\n  return balance !== null && balance !== void 0 ? balance : zero;\n};","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/node_modules/eth-hooks/useBalance.js"],"names":["BigNumber","useState","useCallback","useOnRepetition","zero","from","useBalance","provider","address","pollTime","balance","setBalance","pollBalance","newBalance","getBalance","eq","console","log","toString","leadingTrigger"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,MAAMC,IAAI,GAAGJ,SAAS,CAACK,IAAV,CAAe,CAAf,CAAb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CAACC,QAAD,EAAWC,OAAX,EAAoBC,QAAQ,GAAG,CAA/B,KAAqC;AAC3D,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,EAAtC;AACA,QAAMW,WAAW,GAAGV,WAAW,CAAC,OAAOK,QAAP,EAAiBC,OAAjB,KAA6B;AACzD,QAAID,QAAQ,IAAIC,OAAhB,EAAyB;AACrB,YAAMK,UAAU,GAAG,MAAMN,QAAQ,CAACO,UAAT,CAAoBN,OAApB,CAAzB;;AACA,UAAI,CAACK,UAAU,CAACE,EAAX,CAAcL,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyCA,OAAzC,GAAmDN,IAAjE,CAAL,EAA6E;AACzEO,QAAAA,UAAU,CAACE,UAAD,CAAV;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ,EAAqBK,UAAU,CAACK,QAAX,EAArB,EAA4CR,OAA5C;AACH;AACJ;AACJ,GAR8B,EAQ5B,CAACA,OAAD,CAR4B,CAA/B;AASAP,EAAAA,eAAe,CAACS,WAAD,EAAc;AAAEH,IAAAA,QAAF;AAAYF,IAAAA,QAAZ;AAAsBY,IAAAA,cAAc,EAAEX,OAAO,IAAI,IAAX,IAAmBA,OAAO,KAAK,EAA/B,IAAqCD,QAAQ,IAAI;AAAvF,GAAd,EAA6GA,QAA7G,EAAuHC,OAAvH,CAAf;AACA,SAAOE,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyCA,OAAzC,GAAmDN,IAA1D;AACH,CAbM","sourcesContent":["import { BigNumber } from 'ethers';\nimport { useState, useCallback } from 'react';\nimport { useOnRepetition } from \"./useOnRepetition\";\nconst zero = BigNumber.from(0);\n/**\n * Gets your balance in ETH from given address and provider\n *\n * ~ Features ~\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n * @param provider (ethers->Provider)\n * @param address (string)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (Bignumber) ::  current balance\n */\nexport const useBalance = (provider, address, pollTime = 0) => {\n    const [balance, setBalance] = useState();\n    const pollBalance = useCallback(async (provider, address) => {\n        if (provider && address) {\n            const newBalance = await provider.getBalance(address);\n            if (!newBalance.eq(balance !== null && balance !== void 0 ? balance : zero)) {\n                setBalance(newBalance);\n                console.log(address, newBalance.toString(), balance);\n            }\n        }\n    }, [balance]);\n    useOnRepetition(pollBalance, { pollTime, provider, leadingTrigger: address != null && address !== '' && provider != null }, provider, address);\n    return balance !== null && balance !== void 0 ? balance : zero;\n};\n"]},"metadata":{},"sourceType":"module"}