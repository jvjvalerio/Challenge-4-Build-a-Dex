{"ast":null,"code":"var _jsxFileName = \"/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/MultiAddressInput.jsx\",\n    _s = $RefreshSig$();\n\nimport { Select } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\nimport { ethers } from \"ethers\";\nimport { useMemo } from \"react\"; // probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <MultiAddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\nexport default function MultiAddressInput(props) {\n  _s();\n\n  const {\n    ensProvider,\n    onChange\n  } = props;\n  const [value, setValue] = useState(props.value || []);\n  const [searchResults, setSearchResults] = useState([]);\n  const children = useMemo(() => {\n    if (searchResults.length < 1) {\n      return [];\n    } // use search result to format children\n\n\n    return searchResults.map(i => {\n      var _i$address, _i$address2;\n\n      return /*#__PURE__*/_jsxDEV(Select.Option, {\n        value: i.address,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginRight: \"3px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Blockie, {\n              address: i.address,\n              size: 5,\n              scale: 3\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }, this), i.ens ? i.ens : ((_i$address = i.address) === null || _i$address === void 0 ? void 0 : _i$address.substr(0, 5)) + \"...\" + ((_i$address2 = i.address) === null || _i$address2 === void 0 ? void 0 : _i$address2.substr(-4))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, this)\n      }, i.address, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this);\n    });\n  }, [searchResults.length]); // const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  // const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const manageSearch = useCallback(async newValue => {\n    if (typeof newValue !== \"undefined\") {\n      let address = newValue;\n      let isResolvedAddress = true;\n\n      if (isENS(address)) {\n        try {\n          const possibleAddress = await ensProvider.resolveName(address);\n\n          if (possibleAddress) {\n            isResolvedAddress = true;\n            address = possibleAddress;\n          } // eslint-disable-next-line no-empty\n\n        } catch (e) {}\n      } else if (ethers.utils.isAddress(address)) {\n        try {\n          const possibleENS = await ensProvider.lookupAddress(address);\n          address = possibleENS;\n          isResolvedAddress = false;\n        } catch (e) {}\n      }\n\n      return {\n        resolvedTo: address,\n        isResolvedAddress\n      };\n    }\n  }, [ensProvider, onChange]);\n\n  const handleSearch = async val => {\n    console.log(`Searching: `, val);\n    const formattedVal = val.toLowerCase();\n    const resolution = await manageSearch(formattedVal);\n    console.log(resolution);\n    const [address, ens] = resolution.isResolvedAddress ? [resolution.resolvedTo, val] : [val, resolution.resolvedTo];\n\n    if (resolution.resolvedTo !== val) {\n      setSearchResults([{\n        address,\n        isResolvedAddress: resolution.isResolvedAddress,\n        ens\n      }]);\n    }\n  };\n\n  const handleOnChange = e => {\n    console.log(e);\n    setSearchResults([]);\n    setValue(e);\n\n    if (typeof onChange === \"function\") {\n      onChange(e.map(i => i.value));\n    }\n  }; // <Blockie address={currentValue} size={8} scale={3} />\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Select, {\n      showSearch: true,\n      showArrow: false,\n      defaultActiveFirstOption: false,\n      onSearch: handleSearch,\n      filterOption: false,\n      labelInValue: true,\n      mode: \"multiple\",\n      id: \"0xMultiAddresses\" // name it something other than address for auto fill doxxing\n      ,\n      name: \"0xMultiAddresses\" // name it something other than address for auto fill doxxing\n      ,\n      placeholder: props.placeholder ? props.placeholder : \"address\",\n      value: value,\n      onChange: handleOnChange,\n      notFoundContent: null,\n      style: {\n        width: \"100%\"\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MultiAddressInput, \"Hk1DQxyolsfiY5QcnCkFx6VkWnY=\");\n\n_c = MultiAddressInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiAddressInput\");","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/MultiAddressInput.jsx"],"names":["Select","useLookupAddress","React","useCallback","useState","QrReader","Blockie","ethers","useMemo","isENS","address","endsWith","MultiAddressInput","props","ensProvider","onChange","value","setValue","searchResults","setSearchResults","children","length","map","i","display","alignItems","marginRight","ens","substr","manageSearch","newValue","isResolvedAddress","possibleAddress","resolveName","e","utils","isAddress","possibleENS","lookupAddress","resolvedTo","handleSearch","val","console","log","formattedVal","toLowerCase","resolution","handleOnChange","placeholder","width"],"mappings":"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","sourcesContent":["import { Select } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\nimport { ethers } from \"ethers\";\nimport { useMemo } from \"react\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <MultiAddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\nexport default function MultiAddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value || []);\n  const [searchResults, setSearchResults] = useState([]);\n\n  const children = useMemo(() => {\n    if (searchResults.length < 1) {\n      return [];\n    }\n\n    // use search result to format children\n    return searchResults.map(i => (\n      <Select.Option key={i.address} value={i.address}>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <div style={{ marginRight: \"3px\" }}>\n            <Blockie address={i.address} size={5} scale={3} />\n          </div>\n          {i.ens ? i.ens : i.address?.substr(0, 5) + \"...\" + i.address?.substr(-4)}\n        </div>\n      </Select.Option>\n    ));\n  }, [searchResults.length]);\n\n  // const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  // const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const manageSearch = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        let isResolvedAddress = true;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n\n            if (possibleAddress) {\n              isResolvedAddress = true;\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        } else if (ethers.utils.isAddress(address)) {\n          try {\n            const possibleENS = await ensProvider.lookupAddress(address);\n\n            address = possibleENS;\n            isResolvedAddress = false;\n          } catch (e) {}\n        }\n        return { resolvedTo: address, isResolvedAddress };\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const handleSearch = async val => {\n    console.log(`Searching: `, val);\n    const formattedVal = val.toLowerCase();\n    const resolution = await manageSearch(formattedVal);\n\n    console.log(resolution);\n\n    const [address, ens] = resolution.isResolvedAddress ? [resolution.resolvedTo, val] : [val, resolution.resolvedTo];\n\n    if (resolution.resolvedTo !== val) {\n      setSearchResults([{ address, isResolvedAddress: resolution.isResolvedAddress, ens }]);\n    }\n  };\n\n  const handleOnChange = e => {\n    console.log(e);\n    setSearchResults([]);\n    setValue(e);\n\n    if (typeof onChange === \"function\") {\n      onChange(e.map(i => i.value));\n    }\n  };\n\n  // <Blockie address={currentValue} size={8} scale={3} />\n\n  return (\n    <div>\n      <Select\n        showSearch\n        showArrow={false}\n        defaultActiveFirstOption={false}\n        onSearch={handleSearch}\n        filterOption={false}\n        labelInValue={true}\n        mode=\"multiple\"\n        id=\"0xMultiAddresses\" // name it something other than address for auto fill doxxing\n        name=\"0xMultiAddresses\" // name it something other than address for auto fill doxxing\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        value={value}\n        onChange={handleOnChange}\n        notFoundContent={null}\n        style={{ width: \"100%\" }}\n      >\n        {children}\n      </Select>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}