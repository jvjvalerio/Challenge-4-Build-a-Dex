{"ast":null,"code":"import { useEffect, useRef } from 'react';\n/**\n * @see useOnRepetition for a newer implementation\n * helper hook to call a function regularly in time intervals\n * @param callbackFn\n * @param delay\n * @param extraWatch\n */\n\nexport const usePoller = (callbackFn, delay, extraWatch = false) => {\n  const savedCallback = useRef(); // Remember the latest fn.\n\n  useEffect(() => {\n    savedCallback.current = callbackFn;\n  }, [callbackFn]); // Set up the interval.\n\n  useEffect(() => {\n    const tick = () => {\n      if (savedCallback.current) savedCallback.current();\n    };\n\n    if (delay !== null && delay > 0) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]); // run at start too\n\n  useEffect(() => {\n    if (savedCallback.current && delay > 0) savedCallback.current(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [extraWatch]);\n};","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/node_modules/eth-hooks/usePoller.js"],"names":["useEffect","useRef","usePoller","callbackFn","delay","extraWatch","savedCallback","current","tick","id","setInterval","clearInterval"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,UAAD,EAAaC,KAAb,EAAoBC,UAAU,GAAG,KAAjC,KAA2C;AAChE,QAAMC,aAAa,GAAGL,MAAM,EAA5B,CADgE,CAEhE;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,aAAa,CAACC,OAAd,GAAwBJ,UAAxB;AACH,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT,CAHgE,CAMhE;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,IAAI,GAAG,MAAM;AACf,UAAIF,aAAa,CAACC,OAAlB,EACID,aAAa,CAACC,OAAd;AACP,KAHD;;AAIA,QAAIH,KAAK,KAAK,IAAV,IAAkBA,KAAK,GAAG,CAA9B,EAAiC;AAC7B,YAAMK,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOJ,KAAP,CAAtB;AACA,aAAO,MAAMO,aAAa,CAACF,EAAD,CAA1B;AACH;AACJ,GATQ,EASN,CAACL,KAAD,CATM,CAAT,CAPgE,CAiBhE;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,aAAa,CAACC,OAAd,IAAyBH,KAAK,GAAG,CAArC,EACIE,aAAa,CAACC,OAAd,GAFQ,CAGZ;AACH,GAJQ,EAIN,CAACF,UAAD,CAJM,CAAT;AAKH,CAvBM","sourcesContent":["import { useEffect, useRef } from 'react';\n/**\n * @see useOnRepetition for a newer implementation\n * helper hook to call a function regularly in time intervals\n * @param callbackFn\n * @param delay\n * @param extraWatch\n */\nexport const usePoller = (callbackFn, delay, extraWatch = false) => {\n    const savedCallback = useRef();\n    // Remember the latest fn.\n    useEffect(() => {\n        savedCallback.current = callbackFn;\n    }, [callbackFn]);\n    // Set up the interval.\n    useEffect(() => {\n        const tick = () => {\n            if (savedCallback.current)\n                savedCallback.current();\n        };\n        if (delay !== null && delay > 0) {\n            const id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n    // run at start too\n    useEffect(() => {\n        if (savedCallback.current && delay > 0)\n            savedCallback.current();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [extraWatch]);\n};\n"]},"metadata":{},"sourceType":"module"}