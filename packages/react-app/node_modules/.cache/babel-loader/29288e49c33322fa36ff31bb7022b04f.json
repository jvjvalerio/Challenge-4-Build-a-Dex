{"ast":null,"code":"import { utils } from 'ethers';\nimport { useEffect, useState } from 'react';\n/**\n * Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\n *\n  ~ Features ~\n  - Provide contractAddress to check if the contract is deployed\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\n * @param provider (TEthersProvider)\n * @param contractAddress (string)\n * @returns (boolean)\n */\n\nexport const useContractExistsAtAddress = (provider, contractAddress) => {\n  const [contractIsDeployed, setContractIsDeployed] = useState(false);\n  useEffect(() => {\n    /**\n     * We can look at the blockchain and see what's stored at `contractAddress`\n     * If we find code then we know that a contract exists there.\n     * If we find nothing (0x0) then there is no contract deployed to that address\n     */\n    const checkDeployment = async () => {\n      if (!utils.isAddress(contractAddress)) {\n        return;\n      }\n\n      if (provider) {\n        const bytecode = await provider.getCode(contractAddress);\n        setContractIsDeployed(bytecode !== '0x');\n      }\n    };\n\n    void checkDeployment();\n  }, [provider, contractAddress]);\n  return contractIsDeployed;\n};","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/node_modules/eth-hooks/useContractExistsAtAddress.js"],"names":["utils","useEffect","useState","useContractExistsAtAddress","provider","contractAddress","contractIsDeployed","setContractIsDeployed","checkDeployment","isAddress","bytecode","getCode"],"mappings":"AAAA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,0BAA0B,GAAG,CAACC,QAAD,EAAWC,eAAX,KAA+B;AACrE,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CL,QAAQ,CAAC,KAAD,CAA5D;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ;AACR;AACA;AACA;AACA;AACQ,UAAMO,eAAe,GAAG,YAAY;AAChC,UAAI,CAACR,KAAK,CAACS,SAAN,CAAgBJ,eAAhB,CAAL,EAAuC;AACnC;AACH;;AACD,UAAID,QAAJ,EAAc;AACV,cAAMM,QAAQ,GAAG,MAAMN,QAAQ,CAACO,OAAT,CAAiBN,eAAjB,CAAvB;AACAE,QAAAA,qBAAqB,CAACG,QAAQ,KAAK,IAAd,CAArB;AACH;AACJ,KARD;;AASA,SAAKF,eAAe,EAApB;AACH,GAhBQ,EAgBN,CAACJ,QAAD,EAAWC,eAAX,CAhBM,CAAT;AAiBA,SAAOC,kBAAP;AACH,CApBM","sourcesContent":["import { utils } from 'ethers';\nimport { useEffect, useState } from 'react';\n/**\n * Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\n *\n  ~ Features ~\n  - Provide contractAddress to check if the contract is deployed\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\n * @param provider (TEthersProvider)\n * @param contractAddress (string)\n * @returns (boolean)\n */\nexport const useContractExistsAtAddress = (provider, contractAddress) => {\n    const [contractIsDeployed, setContractIsDeployed] = useState(false);\n    useEffect(() => {\n        /**\n         * We can look at the blockchain and see what's stored at `contractAddress`\n         * If we find code then we know that a contract exists there.\n         * If we find nothing (0x0) then there is no contract deployed to that address\n         */\n        const checkDeployment = async () => {\n            if (!utils.isAddress(contractAddress)) {\n                return;\n            }\n            if (provider) {\n                const bytecode = await provider.getCode(contractAddress);\n                setContractIsDeployed(bytecode !== '0x');\n            }\n        };\n        void checkDeployment();\n    }, [provider, contractAddress]);\n    return contractIsDeployed;\n};\n"]},"metadata":{},"sourceType":"module"}