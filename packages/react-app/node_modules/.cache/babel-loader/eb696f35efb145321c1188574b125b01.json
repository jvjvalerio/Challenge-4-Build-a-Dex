{"ast":null,"code":"import _regeneratorRuntime from\"/Users/untitled/challenge-4-single-pool-dex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/untitled/challenge-4-single-pool-dex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/untitled/challenge-4-single-pool-dex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Input}from\"antd\";import React,{useEffect,useState}from\"react\";// small change in useEffect, display currentValue if it's provided by user\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/import{jsx as _jsx}from\"react/jsx-runtime\";export default function EtherInput(props){var _useState=useState(props.price?\"USD\":\"ETH\"),_useState2=_slicedToArray(_useState,2),mode=_useState2[0],setMode=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),display=_useState4[0],setDisplay=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),value=_useState6[0],setValue=_useState6[1];var currentValue=typeof props.value!==\"undefined\"?props.value:value;useEffect(function(){if(!currentValue){setDisplay(\"\");}},[currentValue]);return/*#__PURE__*/_jsx(Input,{placeholder:props.placeholder?props.placeholder:\"amount in \"+mode,autoFocus:props.autoFocus,prefix:mode===\"USD\"?\"$\":\"Îž\",value:display,addonAfter:!props.price?\"\":/*#__PURE__*/_jsx(\"div\",{style:{cursor:\"pointer\"},onClick:function onClick(){if(mode===\"USD\"){setMode(\"ETH\");setDisplay(currentValue);}else{setMode(\"USD\");if(currentValue){var usdValue=\"\"+(parseFloat(currentValue)*props.price).toFixed(2);setDisplay(usdValue);}else{setDisplay(currentValue);}}},children:mode===\"USD\"?\"USD ðŸ”€\":\"ETH ðŸ”€\"}),onChange:/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var newValue,possibleNewValue,ethValue;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:newValue=e.target.value;if(mode===\"USD\"){possibleNewValue=parseFloat(newValue);if(possibleNewValue){ethValue=possibleNewValue/props.price;setValue(ethValue);if(typeof props.onChange===\"function\"){props.onChange(ethValue);}setDisplay(newValue);}else{setDisplay(newValue);}}else{setValue(newValue);if(typeof props.onChange===\"function\"){props.onChange(newValue);}setDisplay(newValue);}case 2:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}()});}","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/EtherInput.jsx"],"names":["Input","React","useEffect","useState","EtherInput","props","price","mode","setMode","display","setDisplay","value","setValue","currentValue","placeholder","autoFocus","cursor","usdValue","parseFloat","toFixed","e","newValue","target","possibleNewValue","ethValue","onChange"],"mappings":"meAAA,OAASA,KAAT,KAAsB,MAAtB,CACA,MAAOC,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E,2CAEA,cAAe,SAASC,CAAAA,UAAT,CAAoBC,KAApB,CAA2B,CACxC,cAAwBF,QAAQ,CAACE,KAAK,CAACC,KAAN,CAAc,KAAd,CAAsB,KAAvB,CAAhC,wCAAOC,IAAP,eAAaC,OAAb,eACA,eAA8BL,QAAQ,EAAtC,yCAAOM,OAAP,eAAgBC,UAAhB,eACA,eAA0BP,QAAQ,EAAlC,yCAAOQ,KAAP,eAAcC,QAAd,eAEA,GAAMC,CAAAA,YAAY,CAAG,MAAOR,CAAAA,KAAK,CAACM,KAAb,GAAuB,WAAvB,CAAqCN,KAAK,CAACM,KAA3C,CAAmDA,KAAxE,CAEAT,SAAS,CAAC,UAAM,CACd,GAAI,CAACW,YAAL,CAAmB,CACjBH,UAAU,CAAC,EAAD,CAAV,CACD,CACF,CAJQ,CAIN,CAACG,YAAD,CAJM,CAAT,CAMA,mBACE,KAAC,KAAD,EACE,WAAW,CAAER,KAAK,CAACS,WAAN,CAAoBT,KAAK,CAACS,WAA1B,CAAwC,aAAeP,IADtE,CAEE,SAAS,CAAEF,KAAK,CAACU,SAFnB,CAGE,MAAM,CAAER,IAAI,GAAK,KAAT,CAAiB,GAAjB,CAAuB,GAHjC,CAIE,KAAK,CAAEE,OAJT,CAKE,UAAU,CACR,CAACJ,KAAK,CAACC,KAAP,CACE,EADF,cAGE,YACE,KAAK,CAAE,CAAEU,MAAM,CAAE,SAAV,CADT,CAEE,OAAO,CAAE,kBAAM,CACb,GAAIT,IAAI,GAAK,KAAb,CAAoB,CAClBC,OAAO,CAAC,KAAD,CAAP,CACAE,UAAU,CAACG,YAAD,CAAV,CACD,CAHD,IAGO,CACLL,OAAO,CAAC,KAAD,CAAP,CACA,GAAIK,YAAJ,CAAkB,CAChB,GAAMI,CAAAA,QAAQ,CAAG,GAAK,CAACC,UAAU,CAACL,YAAD,CAAV,CAA2BR,KAAK,CAACC,KAAlC,EAAyCa,OAAzC,CAAiD,CAAjD,CAAtB,CACAT,UAAU,CAACO,QAAD,CAAV,CACD,CAHD,IAGO,CACLP,UAAU,CAACG,YAAD,CAAV,CACD,CACF,CACF,CAfH,UAiBGN,IAAI,GAAK,KAAT,CAAiB,QAAjB,CAA4B,QAjB/B,EATN,CA8BE,QAAQ,0FAAE,iBAAMa,CAAN,yJACFC,QADE,CACSD,CAAC,CAACE,MAAF,CAASX,KADlB,CAER,GAAIJ,IAAI,GAAK,KAAb,CAAoB,CACZgB,gBADY,CACOL,UAAU,CAACG,QAAD,CADjB,CAElB,GAAIE,gBAAJ,CAAsB,CACdC,QADc,CACHD,gBAAgB,CAAGlB,KAAK,CAACC,KADtB,CAEpBM,QAAQ,CAACY,QAAD,CAAR,CACA,GAAI,MAAOnB,CAAAA,KAAK,CAACoB,QAAb,GAA0B,UAA9B,CAA0C,CACxCpB,KAAK,CAACoB,QAAN,CAAeD,QAAf,EACD,CACDd,UAAU,CAACW,QAAD,CAAV,CACD,CAPD,IAOO,CACLX,UAAU,CAACW,QAAD,CAAV,CACD,CACF,CAZD,IAYO,CACLT,QAAQ,CAACS,QAAD,CAAR,CACA,GAAI,MAAOhB,CAAAA,KAAK,CAACoB,QAAb,GAA0B,UAA9B,CAA0C,CACxCpB,KAAK,CAACoB,QAAN,CAAeJ,QAAf,EACD,CACDX,UAAU,CAACW,QAAD,CAAV,CACD,CApBO,sDAAF,8DA9BV,EADF,CAuDD","sourcesContent":["import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={mode === \"USD\" ? \"$\" : \"Îž\"}\n      value={display}\n      addonAfter={\n        !props.price ? (\n          \"\"\n        ) : (\n          <div\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              if (mode === \"USD\") {\n                setMode(\"ETH\");\n                setDisplay(currentValue);\n              } else {\n                setMode(\"USD\");\n                if (currentValue) {\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n                  setDisplay(usdValue);\n                } else {\n                  setDisplay(currentValue);\n                }\n              }\n            }}\n          >\n            {mode === \"USD\" ? \"USD ðŸ”€\" : \"ETH ðŸ”€\"}\n          </div>\n        )\n      }\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}