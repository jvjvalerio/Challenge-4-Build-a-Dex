{"ast":null,"code":"var _jsxFileName = \"/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/Faucet.jsx\",\n    _s = $RefreshSig$();\n\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  utils\n} = require(\"ethers\"); // improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\n\nexport default function Faucet(props) {\n  _s();\n\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n  const {\n    price,\n    placeholder,\n    localProvider,\n    ensProvider\n  } = props;\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n\n    getFaucetAddress();\n  }, [localProvider]);\n  let blockie;\n\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = /*#__PURE__*/_jsxDEV(Blockies, {\n      seed: address.toLowerCase(),\n      size: 8,\n      scale: 4\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }, this);\n  } else {\n    blockie = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }, this);\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: /*#__PURE__*/_jsxDEV(Input, {\n      size: \"large\",\n      placeholder: placeholder ? placeholder : \"local faucet\",\n      prefix: blockie,\n      value: address,\n      onChange: e => updateAddress(e.target.value),\n      suffix: /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"Faucet: Send local ether to an address.\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            tx({\n              to: address,\n              value: utils.parseEther(\"0.01\")\n            });\n            setAddress(\"\");\n          },\n          shape: \"circle\",\n          icon: /*#__PURE__*/_jsxDEV(SendOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Wallet, {\n          color: \"#888888\",\n          provider: localProvider,\n          ensProvider: ensProvider,\n          price: price,\n          address: faucetAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Faucet, \"+xruEZHsvd3TnqG43qbcrQdbPLk=\");\n\n_c = Faucet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Faucet\");","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/Faucet.jsx"],"names":["SendOutlined","Button","Input","Tooltip","React","useState","useEffect","Blockies","Transactor","Wallet","utils","require","Faucet","props","address","setAddress","faucetAddress","setFaucetAddress","price","placeholder","localProvider","ensProvider","getFaucetAddress","_faucetAddress","listAccounts","blockie","toLowerCase","updateAddress","newValue","isAddress","tx","e","target","value","to","parseEther"],"mappings":"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","sourcesContent":["import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}