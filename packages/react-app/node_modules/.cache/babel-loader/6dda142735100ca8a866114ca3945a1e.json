{"ast":null,"code":"const {\n  JsonRpcError,\n  EthJsonRpcError\n} = require('./classes');\n\nconst {\n  getMessageFromCode\n} = require('./utils');\n\nconst ERROR_CODES = require('./errorCodes.json');\n\nmodule.exports = {\n  /**\n   * Get a JSON RPC 2.0 Parse error.\n   * @param {string} [message] - A custom message.\n   * @param {any} [data] - Error data.\n   * @return {JsonRpcError} The error.\n   */\n  parse: (message, data) => getJsonRpcError(ERROR_CODES.jsonRpc.parse, message, data),\n\n  /**\n   * Get a JSON RPC 2.0 Invalid Request error.\n   * @param {string} [message] - A custom message.\n   * @param {any} [data] - Error data.\n   * @return {JsonRpcError} The error.\n   */\n  invalidRequest: (message, data) => getJsonRpcError(ERROR_CODES.jsonRpc.invalidRequest, message, data),\n\n  /**\n   * Get a JSON RPC 2.0 Invalid Params error.\n   * @param {string} [message] - A custom message.\n   * @param {any} [data] - Error data.\n   * @return {JsonRpcError} The error.\n   */\n  invalidParams: (message, data) => getJsonRpcError(ERROR_CODES.jsonRpc.invalidParams, message, data),\n\n  /**\n   * Get a JSON RPC 2.0 Method Not Found error.\n   * @param {string} [message] - A custom message.\n   * @param {any} [data] - Error data.\n   * @return {JsonRpcError} The error.\n   */\n  methodNotFound: (message, data) => getJsonRpcError(ERROR_CODES.jsonRpc.methodNotFound, message, data),\n\n  /**\n   * Get a JSON RPC 2.0 Internal error.\n   * @param {string} [message] - A custom message.\n   * @param {any} [data] - Error data.\n   * @return {JsonRpcError} The error.\n   */\n  internal: (message, data) => getJsonRpcError(ERROR_CODES.jsonRpc.internal, message, data),\n\n  /**\n   * Get a JSON RPC 2.0 Server error.\n   * Permits integer error codes in the [ -32099 <= -32000 ] range.\n   * @param {number} code - The integer error code.\n   * @param {string} [message] - A custom message.\n   * @param {any} [data] - Error data.\n   * @return {JsonRpcError} The error.\n   */\n  server: (code, message, data) => {\n    if (!Number.isInteger(code) || code > -32000 || code < -32099) {\n      throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32000');\n    }\n\n    return getJsonRpcError(code, message, data);\n  },\n  eth: {\n    /**\n     * Get an Ethereum JSON RPC User Rejected Request error.\n     * @param {string} [message] - A custom message.\n     * @param {any} [data] - Error data.\n     * @return {EthJsonRpcError} The error.\n     */\n    userRejectedRequest: (message, data) => {\n      return getEthJsonRpcError(ERROR_CODES.eth.userRejectedRequest, message, data);\n    },\n\n    /**\n     * Get an Ethereum JSON RPC Unauthorized error.\n     * @param {string} [message] - A custom message.\n     * @param {any} [data] - Error data.\n     * @return {EthJsonRpcError} The error.\n     */\n    unauthorized: (message, data) => {\n      return getEthJsonRpcError(ERROR_CODES.eth.unauthorized, message, data);\n    },\n\n    /**\n     * Get an Ethereum JSON RPC Unsupported Method error.\n     * @param {string} [message] - A custom message.\n     * @param {any} [data] - Error data.\n     * @return {EthJsonRpcError} The error.\n     */\n    unsupportedMethod: (message, data) => {\n      return getEthJsonRpcError(ERROR_CODES.eth.unsupportedMethod, message, data);\n    },\n\n    /**\n     * Get a custom Ethereum JSON RPC error.\n     * @param {string} code - The error code.\n     * @param {string} message - The error message.\n     * @param {any} [data] - Error data.\n     * @return {EthJsonRpcError} The error.\n     */\n    custom: (code, message, data) => {\n      if (!message || typeof message !== 'string') throw new Error('\"message\" must be a nonempty string');\n      return new EthJsonRpcError(code, message, data);\n    }\n  }\n}; // Internal\n\nfunction getJsonRpcError(code, message, data) {\n  return new JsonRpcError(code, message || getMessageFromCode(code), data);\n}\n\nfunction getEthJsonRpcError(code, message, data) {\n  return new EthJsonRpcError(code, message || getMessageFromCode(code), data);\n}","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/node_modules/eth-json-rpc-errors/src/errors.js"],"names":["JsonRpcError","EthJsonRpcError","require","getMessageFromCode","ERROR_CODES","module","exports","parse","message","data","getJsonRpcError","jsonRpc","invalidRequest","invalidParams","methodNotFound","internal","server","code","Number","isInteger","Error","eth","userRejectedRequest","getEthJsonRpcError","unauthorized","unsupportedMethod","custom"],"mappings":"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","sourcesContent":["\nconst { JsonRpcError, EthJsonRpcError } = require('./classes')\nconst { getMessageFromCode } = require('./utils')\nconst ERROR_CODES = require('./errorCodes.json')\n\nmodule.exports = {\n  /**\n   * Get a JSON RPC 2.0 Parse error.\n   * @param {string} [message] - A custom message.\n   * @param {any} [data] - Error data.\n   * @return {JsonRpcError} The error.\n   */\n  parse: (message, data) => getJsonRpcError(\n    ERROR_CODES.jsonRpc.parse, message, data\n  ),\n\n  /**\n   * Get a JSON RPC 2.0 Invalid Request error.\n   * @param {string} [message] - A custom message.\n   * @param {any} [data] - Error data.\n   * @return {JsonRpcError} The error.\n   */\n  invalidRequest: (message, data) => getJsonRpcError(\n    ERROR_CODES.jsonRpc.invalidRequest, message, data\n  ),\n\n  /**\n   * Get a JSON RPC 2.0 Invalid Params error.\n   * @param {string} [message] - A custom message.\n   * @param {any} [data] - Error data.\n   * @return {JsonRpcError} The error.\n   */\n  invalidParams: (message, data) => getJsonRpcError(\n    ERROR_CODES.jsonRpc.invalidParams, message, data\n  ),\n\n  /**\n   * Get a JSON RPC 2.0 Method Not Found error.\n   * @param {string} [message] - A custom message.\n   * @param {any} [data] - Error data.\n   * @return {JsonRpcError} The error.\n   */\n  methodNotFound: (message, data) => getJsonRpcError(\n    ERROR_CODES.jsonRpc.methodNotFound, message, data\n  ),\n\n  /**\n   * Get a JSON RPC 2.0 Internal error.\n   * @param {string} [message] - A custom message.\n   * @param {any} [data] - Error data.\n   * @return {JsonRpcError} The error.\n   */\n  internal: (message, data) => getJsonRpcError(\n    ERROR_CODES.jsonRpc.internal, message, data\n  ),\n\n  /**\n   * Get a JSON RPC 2.0 Server error.\n   * Permits integer error codes in the [ -32099 <= -32000 ] range.\n   * @param {number} code - The integer error code.\n   * @param {string} [message] - A custom message.\n   * @param {any} [data] - Error data.\n   * @return {JsonRpcError} The error.\n   */\n  server: (code, message, data) => {\n    if (!Number.isInteger(code) || code > -32000 || code < -32099) {\n      throw new Error(\n        '\"code\" must be an integer such that: -32099 <= code <= -32000'\n      )\n    }\n    return getJsonRpcError(code, message, data)\n  },\n  eth: {\n    /**\n     * Get an Ethereum JSON RPC User Rejected Request error.\n     * @param {string} [message] - A custom message.\n     * @param {any} [data] - Error data.\n     * @return {EthJsonRpcError} The error.\n     */\n    userRejectedRequest: (message, data) => {\n      return getEthJsonRpcError(\n        ERROR_CODES.eth.userRejectedRequest, message, data\n      )\n    },\n\n    /**\n     * Get an Ethereum JSON RPC Unauthorized error.\n     * @param {string} [message] - A custom message.\n     * @param {any} [data] - Error data.\n     * @return {EthJsonRpcError} The error.\n     */\n    unauthorized: (message, data) => {\n      return getEthJsonRpcError(\n        ERROR_CODES.eth.unauthorized, message, data\n      )\n    },\n\n    /**\n     * Get an Ethereum JSON RPC Unsupported Method error.\n     * @param {string} [message] - A custom message.\n     * @param {any} [data] - Error data.\n     * @return {EthJsonRpcError} The error.\n     */\n    unsupportedMethod: (message, data) => {\n      return getEthJsonRpcError(\n        ERROR_CODES.eth.unsupportedMethod, message, data\n      )\n    },\n\n    /**\n     * Get a custom Ethereum JSON RPC error.\n     * @param {string} code - The error code.\n     * @param {string} message - The error message.\n     * @param {any} [data] - Error data.\n     * @return {EthJsonRpcError} The error.\n     */\n    custom: (code, message, data) => {\n      if (!message || typeof message !== 'string') throw new Error(\n        '\"message\" must be a nonempty string'\n      )\n      return new EthJsonRpcError(code, message, data)\n    },\n  },\n}\n\n// Internal\n\nfunction getJsonRpcError(code, message, data) {\n  return new JsonRpcError(\n    code,\n    message || getMessageFromCode(code),\n    data\n  )\n}\n\nfunction getEthJsonRpcError(code, message, data) {\n  return new EthJsonRpcError(\n    code,\n    message || getMessageFromCode(code),\n    data\n  )\n}\n"]},"metadata":{},"sourceType":"script"}