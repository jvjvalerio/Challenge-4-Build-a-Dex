{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"../../useOnRepetition\";\n/**\n * Get the balance of an ERC20 token in an address\n *\n * ~ Features ~\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n * @param contract (ethers->Contract) contract object for the ERC20 token\n * @param address (string)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (BigNumber) :: balance\n */\n\nexport const useTokenBalance = (contract, address, pollTime = 0) => {\n  const [balance, setBalance] = useState(BigNumber.from(0));\n  const pollBalance = useCallback(async () => {\n    if (contract != null) {\n      try {\n        // eslint-disable-next-line\n        const newBalance = await contract.balanceOf(address);\n\n        if (newBalance !== balance) {\n          setBalance(newBalance);\n        }\n      } catch (e) {\n        console.log('⚠ Could not get token balance', e);\n      }\n    }\n  }, [address, balance, contract]);\n  useOnRepetition(pollBalance, {\n    pollTime,\n    leadingTrigger: (contract === null || contract === void 0 ? void 0 : contract.provider) != null\n  });\n  return balance;\n};","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/node_modules/eth-hooks/erc/erc-20/useTokenBalance.js"],"names":["BigNumber","useCallback","useState","useOnRepetition","useTokenBalance","contract","address","pollTime","balance","setBalance","from","pollBalance","newBalance","balanceOf","e","console","log","leadingTrigger","provider"],"mappings":"AAAA,SAASA,SAAT,QAA0B,0BAA1B;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG,CAACC,QAAD,EAAWC,OAAX,EAAoBC,QAAQ,GAAG,CAA/B,KAAqC;AAChE,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAACF,SAAS,CAACU,IAAV,CAAe,CAAf,CAAD,CAAtC;AACA,QAAMC,WAAW,GAAGV,WAAW,CAAC,YAAY;AACxC,QAAII,QAAQ,IAAI,IAAhB,EAAsB;AAClB,UAAI;AACA;AACA,cAAMO,UAAU,GAAG,MAAMP,QAAQ,CAACQ,SAAT,CAAmBP,OAAnB,CAAzB;;AACA,YAAIM,UAAU,KAAKJ,OAAnB,EAA4B;AACxBC,UAAAA,UAAU,CAACG,UAAD,CAAV;AACH;AACJ,OAND,CAOA,OAAOE,CAAP,EAAU;AACNC,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CF,CAA7C;AACH;AACJ;AACJ,GAb8B,EAa5B,CAACR,OAAD,EAAUE,OAAV,EAAmBH,QAAnB,CAb4B,CAA/B;AAcAF,EAAAA,eAAe,CAACQ,WAAD,EAAc;AAAEJ,IAAAA,QAAF;AAAYU,IAAAA,cAAc,EAAE,CAACZ,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACa,QAA9D,KAA2E;AAAvG,GAAd,CAAf;AACA,SAAOV,OAAP;AACH,CAlBM","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"../../useOnRepetition\";\n/**\n * Get the balance of an ERC20 token in an address\n *\n * ~ Features ~\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n * @param contract (ethers->Contract) contract object for the ERC20 token\n * @param address (string)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (BigNumber) :: balance\n */\nexport const useTokenBalance = (contract, address, pollTime = 0) => {\n    const [balance, setBalance] = useState(BigNumber.from(0));\n    const pollBalance = useCallback(async () => {\n        if (contract != null) {\n            try {\n                // eslint-disable-next-line\n                const newBalance = await contract.balanceOf(address);\n                if (newBalance !== balance) {\n                    setBalance(newBalance);\n                }\n            }\n            catch (e) {\n                console.log('⚠ Could not get token balance', e);\n            }\n        }\n    }, [address, balance, contract]);\n    useOnRepetition(pollBalance, { pollTime, leadingTrigger: (contract === null || contract === void 0 ? void 0 : contract.provider) != null });\n    return balance;\n};\n"]},"metadata":{},"sourceType":"module"}