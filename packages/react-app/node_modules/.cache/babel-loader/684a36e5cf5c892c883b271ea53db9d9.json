{"ast":null,"code":"const keccak256 = require('keccak256');\n\nfunction toChecksumAddress(address, chainId = null) {\n  if (typeof address !== 'string') {\n    return '';\n  }\n\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    throw new Error(`Given address \"${address}\" is not a valid Ethereum address.`);\n  }\n\n  const stripAddress = stripHexPrefix(address).toLowerCase();\n  const prefix = chainId != null ? chainId.toString() + '0x' : '';\n  const keccakHash = keccak256(prefix + stripAddress).toString('hex').replace(/^0x/i, '');\n  let checksumAddress = '0x';\n\n  for (let i = 0; i < stripAddress.length; i++) {\n    checksumAddress += parseInt(keccakHash[i], 16) >= 8 ? stripAddress[i].toUpperCase() : stripAddress[i];\n  }\n\n  return checksumAddress;\n}\n\nfunction checkAddressChecksum(address, chainId = null) {\n  const stripAddress = stripHexPrefix(address).toLowerCase();\n  const prefix = chainId != null ? chainId.toString() + '0x' : '';\n  const keccakHash = keccak256(prefix + stripAddress).toString('hex').replace(/^0x/i, '');\n\n  for (let i = 0; i < stripAddress.length; i++) {\n    let output = parseInt(keccakHash[i], 16) >= 8 ? stripAddress[i].toUpperCase() : stripAddress[i];\n\n    if (stripHexPrefix(address)[i] !== output) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n;\n\nfunction stripHexPrefix(string) {\n  return string.slice(0, 2) === '0x' ? string.slice(2) : string;\n}\n\n;\nmodule.exports = {\n  toChecksumAddress,\n  checkAddressChecksum\n};","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/node_modules/ethereum-checksum-address/index.js"],"names":["keccak256","require","toChecksumAddress","address","chainId","test","Error","stripAddress","stripHexPrefix","toLowerCase","prefix","toString","keccakHash","replace","checksumAddress","i","length","parseInt","toUpperCase","checkAddressChecksum","output","string","slice","module","exports"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AAEA,SAASC,iBAAT,CAA4BC,OAA5B,EAAqCC,OAAO,GAAG,IAA/C,EAAqD;AACnD,MAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,WAAO,EAAP;AACD;;AAED,MAAI,CAAC,uBAAuBE,IAAvB,CAA4BF,OAA5B,CAAL,EAA2C;AAAE,UAAM,IAAIG,KAAJ,CAAW,kBAAiBH,OAAQ,oCAApC,CAAN;AAAgF;;AAE7H,QAAMI,YAAY,GAAGC,cAAc,CAACL,OAAD,CAAd,CAAwBM,WAAxB,EAArB;AACA,QAAMC,MAAM,GAAGN,OAAO,IAAI,IAAX,GAAkBA,OAAO,CAACO,QAAR,KAAqB,IAAvC,GAA8C,EAA7D;AACA,QAAMC,UAAU,GAAGZ,SAAS,CAACU,MAAM,GAAGH,YAAV,CAAT,CAChBI,QADgB,CACP,KADO,EAEhBE,OAFgB,CAER,MAFQ,EAEA,EAFA,CAAnB;AAGA,MAAIC,eAAe,GAAG,IAAtB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,YAAY,CAACS,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAAED,IAAAA,eAAe,IAAIG,QAAQ,CAACL,UAAU,CAACG,CAAD,CAAX,EAAgB,EAAhB,CAAR,IAA+B,CAA/B,GAAmCR,YAAY,CAACQ,CAAD,CAAZ,CAAgBG,WAAhB,EAAnC,GAAmEX,YAAY,CAACQ,CAAD,CAAlG;AAAuG;;AAEvJ,SAAOD,eAAP;AACD;;AAED,SAASK,oBAAT,CAA+BhB,OAA/B,EAAwCC,OAAO,GAAG,IAAlD,EAAwD;AACtD,QAAMG,YAAY,GAAGC,cAAc,CAACL,OAAD,CAAd,CAAwBM,WAAxB,EAArB;AACA,QAAMC,MAAM,GAAGN,OAAO,IAAI,IAAX,GAAkBA,OAAO,CAACO,QAAR,KAAqB,IAAvC,GAA8C,EAA7D;AACA,QAAMC,UAAU,GAAGZ,SAAS,CAACU,MAAM,GAAGH,YAAV,CAAT,CAChBI,QADgB,CACP,KADO,EAEhBE,OAFgB,CAER,MAFQ,EAEA,EAFA,CAAnB;;AAIA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,YAAY,CAACS,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,QAAIK,MAAM,GAAGH,QAAQ,CAACL,UAAU,CAACG,CAAD,CAAX,EAAgB,EAAhB,CAAR,IAA+B,CAA/B,GAAmCR,YAAY,CAACQ,CAAD,CAAZ,CAAgBG,WAAhB,EAAnC,GAAmEX,YAAY,CAACQ,CAAD,CAA5F;;AACA,QAAIP,cAAc,CAACL,OAAD,CAAd,CAAwBY,CAAxB,MAA+BK,MAAnC,EAA2C;AACzC,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAAA;;AAED,SAASZ,cAAT,CAAyBa,MAAzB,EAAiC;AAC/B,SAAOA,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgB,CAAhB,MAAuB,IAAvB,GAA8BD,MAAM,CAACC,KAAP,CAAa,CAAb,CAA9B,GAAgDD,MAAvD;AACD;;AAAA;AAEDE,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA,iBADe;AAEfiB,EAAAA;AAFe,CAAjB","sourcesContent":["const keccak256 = require('keccak256')\n\nfunction toChecksumAddress (address, chainId = null) {\n  if (typeof address !== 'string') {\n    return ''\n  }\n\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) { throw new Error(`Given address \"${address}\" is not a valid Ethereum address.`) }\n\n  const stripAddress = stripHexPrefix(address).toLowerCase()\n  const prefix = chainId != null ? chainId.toString() + '0x' : ''\n  const keccakHash = keccak256(prefix + stripAddress)\n    .toString('hex')\n    .replace(/^0x/i, '')\n  let checksumAddress = '0x'\n\n  for (let i = 0; i < stripAddress.length; i++) { checksumAddress += parseInt(keccakHash[i], 16) >= 8 ? stripAddress[i].toUpperCase() : stripAddress[i] }\n\n  return checksumAddress\n}\n\nfunction checkAddressChecksum (address, chainId = null) {\n  const stripAddress = stripHexPrefix(address).toLowerCase()\n  const prefix = chainId != null ? chainId.toString() + '0x' : ''\n  const keccakHash = keccak256(prefix + stripAddress)\n    .toString('hex')\n    .replace(/^0x/i, '')\n\n  for (let i = 0; i < stripAddress.length; i++) {\n    let output = parseInt(keccakHash[i], 16) >= 8 ? stripAddress[i].toUpperCase() : stripAddress[i]\n    if (stripHexPrefix(address)[i] !== output) {\n      return false\n    }\n  }\n  return true\n};\n\nfunction stripHexPrefix (string) {\n  return string.slice(0, 2) === '0x' ? string.slice(2) : string\n};\n\nmodule.exports = {\n  toChecksumAddress,\n  checkAddressChecksum\n}\n"]},"metadata":{},"sourceType":"script"}