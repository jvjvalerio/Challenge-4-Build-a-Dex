{"ast":null,"code":"import _regeneratorRuntime from\"/Users/untitled/challenge-4-single-pool-dex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/untitled/challenge-4-single-pool-dex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/untitled/challenge-4-single-pool-dex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{CameraOutlined,QrcodeOutlined}from\"@ant-design/icons\";import{Badge,Input}from\"antd\";import{useLookupAddress}from\"eth-hooks/dapps/ens\";import React,{useCallback,useState}from\"react\";import QrReader from\"react-qr-reader\";import Blockie from\"./Blockie\";import{ethers}from\"ethers\";// probably we need to change value={toAddress} to address={toAddress}\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var isENS=function isENS(){var address=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"\";return address.endsWith(\".eth\")||address.endsWith(\".xyz\");};export default function AddressInput(props){var ensProvider=props.ensProvider,onChange=props.onChange;var _useState=useState(props.value),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),scan=_useState4[0],setScan=_useState4[1];var currentValue=typeof props.value!==\"undefined\"?props.value:value;var ens=useLookupAddress(props.ensProvider,currentValue);var updateAddress=useCallback(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(newValue){var address,possibleAddress;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(typeof newValue!==\"undefined\")){_context.next=14;break;}address=newValue;if(!isENS(address)){_context.next=12;break;}_context.prev=3;_context.next=6;return ensProvider.resolveName(address);case 6:possibleAddress=_context.sent;if(possibleAddress){address=possibleAddress;}// eslint-disable-next-line no-empty\n_context.next=12;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](3);case 12:setValue(address);if(typeof onChange===\"function\"){onChange(address);}case 14:case\"end\":return _context.stop();}}},_callee,null,[[3,10]]);}));return function(_x){return _ref.apply(this,arguments);};}(),[ensProvider,onChange]);return/*#__PURE__*/_jsxs(\"div\",{children:[scan?/*#__PURE__*/_jsx(\"div\",{style:{zIndex:256,position:\"absolute\",left:0,top:0,width:\"100%\"},onClick:function onClick(){setScan(false);},children:/*#__PURE__*/_jsx(QrReader,{delay:250,resolution:1200,onError:function onError(e){console.log(\"SCAN ERROR\",e);setScan(false);},onScan:function onScan(newValue){if(newValue){console.log(\"SCAN VALUE\",newValue);var possibleNewValue=newValue;if(possibleNewValue.indexOf(\"/\")>=0){possibleNewValue=possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));console.log(\"CLEANED VALUE\",possibleNewValue);}setScan(false);updateAddress(possibleNewValue);}},style:{width:\"100%\"}})}):\"\",/*#__PURE__*/_jsx(Input,{id:\"0xAddress\"// name it something other than address for auto fill doxxing\n,name:\"0xAddress\"// name it something other than address for auto fill doxxing\n,autoComplete:\"off\",autoFocus:props.autoFocus,placeholder:props.placeholder?props.placeholder:\"address\",prefix:/*#__PURE__*/_jsx(Blockie,{address:currentValue,size:8,scale:3}),value:ethers.utils.isAddress(currentValue)&&!isENS(currentValue)&&isENS(ens)?ens:currentValue,addonAfter:/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:4,cursor:\"pointer\"},onClick:function onClick(){setScan(!scan);},children:[/*#__PURE__*/_jsx(Badge,{count:/*#__PURE__*/_jsx(CameraOutlined,{style:{fontSize:9}}),children:/*#__PURE__*/_jsx(QrcodeOutlined,{style:{fontSize:18}})}),\" \",\"Scan\"]}),onChange:function onChange(e){updateAddress(e.target.value);}})]});}","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/AddressInput.jsx"],"names":["CameraOutlined","QrcodeOutlined","Badge","Input","useLookupAddress","React","useCallback","useState","QrReader","Blockie","ethers","isENS","address","endsWith","AddressInput","props","ensProvider","onChange","value","setValue","scan","setScan","currentValue","ens","updateAddress","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","e","console","log","possibleNewValue","indexOf","substr","lastIndexOf","autoFocus","placeholder","utils","isAddress","marginTop","cursor","fontSize","target"],"mappings":"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","sourcesContent":["import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\nimport { ethers } from \"ethers\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\nexport default function AddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  return (\n    <div>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                let possibleNewValue = newValue;\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\n                }\n                setScan(false);\n                updateAddress(possibleNewValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\n        addonAfter={\n          <div\n            style={{ marginTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              setScan(!scan);\n            }}\n          >\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n              <QrcodeOutlined style={{ fontSize: 18 }} />\n            </Badge>{\" \"}\n            Scan\n          </div>\n        }\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}