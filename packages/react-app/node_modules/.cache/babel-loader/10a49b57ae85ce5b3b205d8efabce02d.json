{"ast":null,"code":"import{List}from\"antd\";import{useEventListener}from\"eth-hooks/events/useEventListener\";import{Address,TokenBalance}from\"../components\";/*\n  ~ What it does? ~\n\n  Displays a lists of events\n\n  ~ How can I use? ~\n\n  <Events\n    contracts={readContracts}\n    contractName=\"YourContract\"\n    eventName=\"SetPurpose\"\n    localProvider={localProvider}\n    mainnetProvider={mainnetProvider}\n    startBlock={1}\n  />\n*/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Events(_ref){var contracts=_ref.contracts,contractName=_ref.contractName,eventName=_ref.eventName,localProvider=_ref.localProvider,mainnetProvider=_ref.mainnetProvider,startBlock=_ref.startBlock;// ðŸ“Ÿ Listen for broadcast events\nvar events=useEventListener(contracts,contractName,eventName,localProvider,startBlock);return/*#__PURE__*/_jsxs(\"div\",{style:{width:600,margin:\"auto\",marginTop:32,paddingBottom:32},children:[/*#__PURE__*/_jsxs(\"h2\",{children:[eventName,\" Events\",/*#__PURE__*/_jsx(\"br\",{}),eventName===\"EthToTokenSwap\"?\" âŸ  -->ðŸŽˆ Address | Trade | AmountIn | AmountOut\":eventName===\"TokenToEthSwap\"?\"ðŸŽˆ-->âŸ  Address | Trade | AmountOut | AmountIn\":eventName===\"LiquidityProvided\"?\"âž• Address | Liquidity Minted | Eth In | Balloons In\":\"âž– Address | Liquidity Withdrawn | ETH out | Balloons Out \"]}),/*#__PURE__*/_jsx(List,{bordered:true,dataSource:events,renderItem:function renderItem(item){return/*#__PURE__*/_jsxs(List.Item,{children:[/*#__PURE__*/_jsx(Address,{address:item.args[0],ensProvider:mainnetProvider,fontSize:16}),item.args[1].toString().indexOf(\"E\")==-1?/*#__PURE__*/_jsx(TokenBalance,{balance:item.args[1],provider:localProvider}):\"\".concat(item.args[1].toString()),/*#__PURE__*/_jsx(TokenBalance,{balance:item.args[2],provider:localProvider}),/*#__PURE__*/_jsx(TokenBalance,{balance:item.args[3],provider:localProvider})]},item.blockNumber+\"_\"+item.args[0].toString());}})]});}","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/packages/react-app/src/components/Events.jsx"],"names":["List","useEventListener","Address","TokenBalance","Events","contracts","contractName","eventName","localProvider","mainnetProvider","startBlock","events","width","margin","marginTop","paddingBottom","item","args","toString","indexOf","blockNumber"],"mappings":"AAAA,OAASA,IAAT,KAAqB,MAArB,CACA,OAASC,gBAAT,KAAiC,mCAAjC,CACA,OAASC,OAAT,CAAkBC,YAAlB,KAAsC,eAAtC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E,wFAEA,cAAe,SAASC,CAAAA,MAAT,MAAoG,IAAlFC,CAAAA,SAAkF,MAAlFA,SAAkF,CAAvEC,YAAuE,MAAvEA,YAAuE,CAAzDC,SAAyD,MAAzDA,SAAyD,CAA9CC,aAA8C,MAA9CA,aAA8C,CAA/BC,eAA+B,MAA/BA,eAA+B,CAAdC,UAAc,MAAdA,UAAc,CACjH;AACA,GAAMC,CAAAA,MAAM,CAAGV,gBAAgB,CAACI,SAAD,CAAYC,YAAZ,CAA0BC,SAA1B,CAAqCC,aAArC,CAAoDE,UAApD,CAA/B,CAEA,mBACE,aAAK,KAAK,CAAE,CAAEE,KAAK,CAAE,GAAT,CAAcC,MAAM,CAAE,MAAtB,CAA8BC,SAAS,CAAE,EAAzC,CAA6CC,aAAa,CAAE,EAA5D,CAAZ,wBACE,sBACGR,SADH,wBAEE,aAFF,CAGGA,SAAS,GAAK,gBAAd,CACG,iDADH,CAEGA,SAAS,GAAK,gBAAd,CACA,+CADA,CAEAA,SAAS,GAAK,mBAAd,CACA,qDADA,CAEA,2DATN,GADF,cAYE,KAAC,IAAD,EACE,QAAQ,KADV,CAEE,UAAU,CAAEI,MAFd,CAGE,UAAU,CAAE,oBAAAK,IAAI,CAAI,CAClB,mBACE,MAAC,IAAD,CAAM,IAAN,yBACE,KAAC,OAAD,EAAS,OAAO,CAAEA,IAAI,CAACC,IAAL,CAAU,CAAV,CAAlB,CAAgC,WAAW,CAAER,eAA7C,CAA8D,QAAQ,CAAE,EAAxE,EADF,CAEGO,IAAI,CAACC,IAAL,CAAU,CAAV,EAAaC,QAAb,GAAwBC,OAAxB,CAAgC,GAAhC,GAAwC,CAAC,CAAzC,cACC,KAAC,YAAD,EAAc,OAAO,CAAEH,IAAI,CAACC,IAAL,CAAU,CAAV,CAAvB,CAAqC,QAAQ,CAAET,aAA/C,EADD,WAGIQ,IAAI,CAACC,IAAL,CAAU,CAAV,EAAaC,QAAb,EAHJ,CAFH,cAOE,KAAC,YAAD,EAAc,OAAO,CAAEF,IAAI,CAACC,IAAL,CAAU,CAAV,CAAvB,CAAqC,QAAQ,CAAET,aAA/C,EAPF,cAQE,KAAC,YAAD,EAAc,OAAO,CAAEQ,IAAI,CAACC,IAAL,CAAU,CAAV,CAAvB,CAAqC,QAAQ,CAAET,aAA/C,EARF,GAAgBQ,IAAI,CAACI,WAAL,CAAmB,GAAnB,CAAyBJ,IAAI,CAACC,IAAL,CAAU,CAAV,EAAaC,QAAb,EAAzC,CADF,CAYD,CAhBH,EAZF,GADF,CAiCD","sourcesContent":["import { List } from \"antd\";\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\nimport { Address, TokenBalance } from \"../components\";\n\n/*\n  ~ What it does? ~\n\n  Displays a lists of events\n\n  ~ How can I use? ~\n\n  <Events\n    contracts={readContracts}\n    contractName=\"YourContract\"\n    eventName=\"SetPurpose\"\n    localProvider={localProvider}\n    mainnetProvider={mainnetProvider}\n    startBlock={1}\n  />\n*/\n\nexport default function Events({ contracts, contractName, eventName, localProvider, mainnetProvider, startBlock }) {\n  // ðŸ“Ÿ Listen for broadcast events\n  const events = useEventListener(contracts, contractName, eventName, localProvider, startBlock);\n\n  return (\n    <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\n      <h2>\n        {eventName} Events\n        <br />\n        {eventName === \"EthToTokenSwap\"\n          ? \" âŸ  -->ðŸŽˆ Address | Trade | AmountIn | AmountOut\"\n          : eventName === \"TokenToEthSwap\"\n          ? \"ðŸŽˆ-->âŸ  Address | Trade | AmountOut | AmountIn\"\n          : eventName === \"LiquidityProvided\"\n          ? \"âž• Address | Liquidity Minted | Eth In | Balloons In\"\n          : \"âž– Address | Liquidity Withdrawn | ETH out | Balloons Out \"}\n      </h2>\n      <List\n        bordered\n        dataSource={events}\n        renderItem={item => {\n          return (\n            <List.Item key={item.blockNumber + \"_\" + item.args[0].toString()}>\n              <Address address={item.args[0]} ensProvider={mainnetProvider} fontSize={16} />\n              {item.args[1].toString().indexOf(\"E\") == -1 ? (\n                <TokenBalance balance={item.args[1]} provider={localProvider} />\n              ) : (\n                `${item.args[1].toString()}`\n              )}\n              <TokenBalance balance={item.args[2]} provider={localProvider} />\n              <TokenBalance balance={item.args[3]} provider={localProvider} />\n            </List.Item>\n          );\n        }}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}