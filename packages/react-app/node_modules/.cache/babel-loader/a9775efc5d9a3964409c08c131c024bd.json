{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"./useOnRepetition\";\n/**\n * Get the current nonce of the address provided\n * @param provider (TEthersProvider)\n * @param address (string)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (number) nonce\n */\n\nexport const useNonce = (provider, address, pollTime = 0) => {\n  const [nonce, setNonce] = useState(0);\n  const getTransactionCount = useCallback(async () => {\n    const nextNonce = await (provider === null || provider === void 0 ? void 0 : provider.getTransactionCount(address));\n\n    if (nextNonce !== nonce && nextNonce >= 0) {\n      setNonce(nextNonce);\n    }\n  }, [nonce]);\n  useOnRepetition(getTransactionCount, {\n    pollTime,\n    leadingTrigger: provider != null\n  });\n  return nonce;\n};","map":{"version":3,"sources":["/Users/untitled/challenge-4-single-pool-dex/node_modules/eth-hooks/useNonce.js"],"names":["useCallback","useState","useOnRepetition","useNonce","provider","address","pollTime","nonce","setNonce","getTransactionCount","nextNonce","leadingTrigger"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,OAAX,EAAoBC,QAAQ,GAAG,CAA/B,KAAqC;AACzD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAMQ,mBAAmB,GAAGT,WAAW,CAAC,YAAY;AAChD,UAAMU,SAAS,GAAG,OAAON,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACK,mBAAT,CAA6BJ,OAA7B,CAA3D,CAAlB;;AACA,QAAIK,SAAS,KAAKH,KAAd,IAAuBG,SAAS,IAAI,CAAxC,EAA2C;AACvCF,MAAAA,QAAQ,CAACE,SAAD,CAAR;AACH;AACJ,GALsC,EAKpC,CAACH,KAAD,CALoC,CAAvC;AAMAL,EAAAA,eAAe,CAACO,mBAAD,EAAsB;AAAEH,IAAAA,QAAF;AAAYK,IAAAA,cAAc,EAAEP,QAAQ,IAAI;AAAxC,GAAtB,CAAf;AACA,SAAOG,KAAP;AACH,CAVM","sourcesContent":["import { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"./useOnRepetition\";\n/**\n * Get the current nonce of the address provided\n * @param provider (TEthersProvider)\n * @param address (string)\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\n * @returns (number) nonce\n */\nexport const useNonce = (provider, address, pollTime = 0) => {\n    const [nonce, setNonce] = useState(0);\n    const getTransactionCount = useCallback(async () => {\n        const nextNonce = await (provider === null || provider === void 0 ? void 0 : provider.getTransactionCount(address));\n        if (nextNonce !== nonce && nextNonce >= 0) {\n            setNonce(nextNonce);\n        }\n    }, [nonce]);\n    useOnRepetition(getTransactionCount, { pollTime, leadingTrigger: provider != null });\n    return nonce;\n};\n"]},"metadata":{},"sourceType":"module"}